<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐子玉的笔记</title>
  
  <subtitle>Good Good Stady, Day Day Up.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xuziyu.cn/"/>
  <updated>2019-03-16T07:34:33.693Z</updated>
  <id>http://blog.xuziyu.cn/</id>
  
  <author>
    <name>徐子玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工具函数utils.js</title>
    <link href="http://blog.xuziyu.cn/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0utils-js.html"/>
    <id>http://blog.xuziyu.cn/前端工具函数utils-js.html</id>
    <published>2018-10-24T06:44:00.000Z</published>
    <updated>2019-03-16T07:34:33.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个utils.js主要用于layui中<br><a id="more"></a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 扩展一个utils模块</span><br><span class="line"> * */</span><br><span class="line">layui.define([&apos;layer&apos;, &apos;table&apos;, &apos;form&apos;, &apos;laydate&apos;, &apos;laytpl&apos;, &apos;admin&apos;, &apos;view&apos;], function (exports) &#123; //提示：模块也可以依赖其它模块，如：layui.define(&apos;layer&apos;, callback);</span><br><span class="line">  var $ = layui.$,</span><br><span class="line">    layer = layui.layer,</span><br><span class="line">    form = layui.form,</span><br><span class="line">    table = layui.table,</span><br><span class="line">    laydate = layui.laydate,</span><br><span class="line">    laytpl = layui.laytpl,</span><br><span class="line">    admin = layui.admin,</span><br><span class="line">    view = layui.view,</span><br><span class="line">    setter = layui.setter,</span><br><span class="line">    baseUrl = setter.baseUrl;</span><br><span class="line">  var utils = &#123;</span><br><span class="line">    // 测试</span><br><span class="line">    hello: function (str) &#123;</span><br><span class="line">      console.log(&apos;Hello &apos; + (str || &quot;xuqi&apos;s m-utils&quot;));</span><br><span class="line">    &#125;,</span><br><span class="line">    /*时间转换*/</span><br><span class="line">    checkTime: function checkTime(i) &#123;</span><br><span class="line">      if (i &lt; 10) &#123;</span><br><span class="line">        i = &apos;0&apos; + i;</span><br><span class="line">      &#125;</span><br><span class="line">      return i;</span><br><span class="line">    &#125;,</span><br><span class="line">    formatTime: function formatTime(date) &#123;</span><br><span class="line">      var getFullYear = this.checkTime(date.getFullYear());</span><br><span class="line">      var getMonth = this.checkTime(date.getMonth() + 1);</span><br><span class="line">      var getDate = this.checkTime(date.getDate());</span><br><span class="line">      var getHours = this.checkTime(date.getHours());</span><br><span class="line">      var getMinutes = this.checkTime(date.getMinutes());</span><br><span class="line">      var getSeconds = this.checkTime(date.getSeconds());</span><br><span class="line">      return getFullYear + &quot;-&quot; + getMonth + &quot;-&quot; + getDate + &quot; &quot; + getHours + &quot;:&quot; + getMinutes + &quot;:&quot; + getSeconds;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    /* 开发中的提示 */</span><br><span class="line">    coding: function (btn) &#123;</span><br><span class="line">      var btn_dom = btn;</span><br><span class="line">      if (!btn) &#123;</span><br><span class="line">        btn_dom = &apos;.js-btn-coding&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">      $(btn_dom).on(&apos;click&apos;, function () &#123;</span><br><span class="line">        layer.alert(&apos;维护中，需官方授权开放&apos;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    codingAlert: function () &#123;</span><br><span class="line">      layer.alert(&apos;维护中，需官方授权开放&apos;);</span><br><span class="line">      return false;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 配置table */</span><br><span class="line">    setTableOption: function (dataName, method) &#123;</span><br><span class="line">      var method = method || &apos;get&apos;;</span><br><span class="line">      table.set(&#123;</span><br><span class="line">        method: method,</span><br><span class="line">        request: &#123;</span><br><span class="line">          pageName: &apos;curpage&apos;, //页码的参数名称，默认：page</span><br><span class="line">          limitName: &apos;pagesize&apos; //每页数据量的参数名，默认：limit</span><br><span class="line">        &#125;,</span><br><span class="line">        response: &#123;</span><br><span class="line">          statusName: &apos;code&apos;, //数据状态的字段名称，默认：code</span><br><span class="line">          statusCode: 200, //成功的状态码，默认：0</span><br><span class="line">          msgName: &apos;message&apos;, //状态信息的字段名称，默认：msg</span><br><span class="line">          countName: &apos;count&apos;, //数据总数的字段名称，默认：count</span><br><span class="line">          dataName: dataName //数据列表的字段名称，默认：data</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    /*类型验证*/</span><br><span class="line">    checkStr: function (str, type) &#123;</span><br><span class="line">      switch (type) &#123;</span><br><span class="line">        case &apos;phone&apos;:</span><br><span class="line">          //手机号码</span><br><span class="line">          return (/^1[3|4|5|7|8][0-9]&#123;9&#125;$/.test(str));</span><br><span class="line">        case &apos;tel&apos;:</span><br><span class="line">          //座机</span><br><span class="line">          return (/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/.test(str));</span><br><span class="line">        case &apos;card&apos;:</span><br><span class="line">          //身份证</span><br><span class="line">          return (/^\d&#123;15&#125;|\d&#123;18&#125;$/.test(str));</span><br><span class="line">        case &apos;pwd&apos;:</span><br><span class="line">          //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span><br><span class="line">          return (/^[a-zA-Z]\w&#123;5,17&#125;$/.test(str));</span><br><span class="line">        case &apos;postal&apos;:</span><br><span class="line">          //邮政编码</span><br><span class="line">          return (/[1-9]\d&#123;5&#125;(?!\d)/.test(str));</span><br><span class="line">        case &apos;QQ&apos;:</span><br><span class="line">          //QQ号</span><br><span class="line">          return (/^[1-9][0-9]&#123;4,9&#125;$/.test(str));</span><br><span class="line">        case &apos;email&apos;:</span><br><span class="line">          //邮箱</span><br><span class="line">          return (/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.test(str));</span><br><span class="line">        case &apos;money&apos;:</span><br><span class="line">          //金额(小数点2位)</span><br><span class="line">          return (/(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/.test(str)</span><br><span class="line">            // return (/^\d*(?:\.\d&#123;0,2&#125;)?$/.test(str)</span><br><span class="line">          );</span><br><span class="line">        case &apos;URL&apos;:</span><br><span class="line">          //网址</span><br><span class="line">          return (/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/.test(str));</span><br><span class="line">        case &apos;IP&apos;:</span><br><span class="line">          //IP</span><br><span class="line">          return (/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(str));</span><br><span class="line">        case &apos;date&apos;:</span><br><span class="line">          //日期时间</span><br><span class="line">          return (/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/.test(str) || /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/.test(str));</span><br><span class="line">        case &apos;number&apos;:</span><br><span class="line">          //数字</span><br><span class="line">          return (/^[0-9]$/.test(str));</span><br><span class="line">        case &apos;integers&apos;:</span><br><span class="line">          //数字</span><br><span class="line">          return (/^-?[1-9]\d*$/.test(str));</span><br><span class="line">        case &apos;integer&apos;:</span><br><span class="line">          //非负整数</span><br><span class="line">          return (/^(0|[1-9]\d*)$/.test(str));</span><br><span class="line">        case &apos;integer5&apos;:</span><br><span class="line">          //非负整数1-5</span><br><span class="line">          return (/^[0-5]$/.test(str));</span><br><span class="line">        case &apos;english&apos;:</span><br><span class="line">          //英文</span><br><span class="line">          return (/^[a-zA-Z]+$/.test(str));</span><br><span class="line">        case &apos;chinese&apos;:</span><br><span class="line">          //中文</span><br><span class="line">          return (/^[\u4E00-\u9FA5]+$/.test(str));</span><br><span class="line">        case &apos;lower&apos;:</span><br><span class="line">          //小写</span><br><span class="line">          return (/^[a-z]+$/.test(str));</span><br><span class="line">        case &apos;upper&apos;:</span><br><span class="line">          //大写</span><br><span class="line">          return (/^[A-Z]+$/.test(str));</span><br><span class="line">        case &apos;HTML&apos;:</span><br><span class="line">          //HTML标记</span><br><span class="line">          return (/&lt;(&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^&apos;&quot;&gt;])*&gt;/.test(str));</span><br><span class="line">        default:</span><br><span class="line">          return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    positiveInteger: function () &#123;</span><br><span class="line">      form.verify(&#123;</span><br><span class="line">        positiveInteger: [</span><br><span class="line">          /^(0|[1-9]\d*)$/, &apos;请输入正整数&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    money: function () &#123;</span><br><span class="line">      form.verify(&#123;</span><br><span class="line">        money: [</span><br><span class="line">          /(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/, &apos;金额只能保留小数点后两位&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /*保留两位小数*/</span><br><span class="line">    returnFloat: function returnFloat(value) &#123;</span><br><span class="line">      // var value=Math.round(parseFloat(value)*100)/100;</span><br><span class="line">      var xsd = value.toString().split(&quot;.&quot;);</span><br><span class="line">      if (xsd.length == 1) &#123;</span><br><span class="line">        value = value.toString() + &quot;.00&quot;;</span><br><span class="line">        return value;</span><br><span class="line">      &#125;</span><br><span class="line">      if (xsd.length &gt; 1) &#123;</span><br><span class="line">        if (xsd[1].length &lt; 2) &#123;</span><br><span class="line">          value = value.toString() + &quot;0&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          value = xsd[0] + &apos;.&apos; + xsd[1].substr(0, 2);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*选择时间范围*/</span><br><span class="line">    laydate: function (dom) &#123;</span><br><span class="line">      laydate.render(&#123;</span><br><span class="line">        elem: dom, //指定元素</span><br><span class="line">        range: true, //或 range: &apos;~&apos; 来自定义分割字符</span><br><span class="line">        done: function (value, date, endDate) &#123;</span><br><span class="line">          var start_date, end_date;</span><br><span class="line">          var $start = $(dom).siblings(&apos;.js-time-start&apos;);</span><br><span class="line">          var $end = $(dom).siblings(&apos;.js-time-end&apos;);</span><br><span class="line">          // console.log(value);</span><br><span class="line">          if (value) &#123;</span><br><span class="line">            start_date = date.year + &apos;-&apos; + utils.checkTime(date.month) + &apos;-&apos; + utils.checkTime(date.date);</span><br><span class="line">            end_date = endDate.year + &apos;-&apos; + utils.checkTime(endDate.month) + &apos;-&apos; + utils.checkTime(endDate.date);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            start_date = &apos;&apos;;</span><br><span class="line">            end_date = &apos;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">          console.log(&#123;</span><br><span class="line">            &apos;start_date&apos;: start_date,</span><br><span class="line">            &apos;end_date&apos;: end_date</span><br><span class="line">          &#125;);</span><br><span class="line">          $start.val(start_date);</span><br><span class="line">          $end.val(end_date);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 可能废弃，layer有photos方法可替换 */</span><br><span class="line">    showImg: function showImg($this, td_title_index) &#123;</span><br><span class="line">      let idx = td_title_index;</span><br><span class="line">      let type = typeof (idx);</span><br><span class="line">      // let this_id = &apos;#&apos; + $this.attr(&apos;id&apos;);</span><br><span class="line">      let this_class = &apos;.&apos; + $this.attr(&apos;class&apos;);</span><br><span class="line">      let td_img_index = $this.closest(&apos;td&apos;).index();</span><br><span class="line">      let th_img_title = $this.closest(&apos;.layui-table-box&apos;).find(&apos;.layui-table-header thead&gt;tr&gt;th&apos;).eq(td_img_index).text();</span><br><span class="line">      let content_img = $this.find(&apos;img&apos;);</span><br><span class="line">      let th_index_title = &apos;&apos;;</span><br><span class="line">      console.log(type)</span><br><span class="line">      if (idx &amp;&amp; type === &apos;number&apos;) &#123;</span><br><span class="line">        th_index_title = $this.closest(&apos;tr&apos;).find(&apos;td&apos;).eq(idx).text();</span><br><span class="line">        th_img_title = th_index_title + &apos;的&apos; + th_img_title;</span><br><span class="line">      &#125; else if (idx &amp;&amp; type === &apos;string&apos;) &#123;</span><br><span class="line">        th_index_title = $this.closest(&apos;tr&apos;).find(&apos;td[data-field=&quot;&apos; + idx + &apos;&quot;]&apos;).text();</span><br><span class="line">        th_img_title = th_index_title + &apos;的&apos; + th_img_title;</span><br><span class="line">      &#125;</span><br><span class="line">      // console.log(idx, this_str);</span><br><span class="line">      layer.open(&#123;</span><br><span class="line">        type: 1,</span><br><span class="line">        shadeClose: true,</span><br><span class="line">        scrollbar: false,</span><br><span class="line">        title: th_img_title || &apos;图像&apos;,</span><br><span class="line">        content: $this, //捕获的元素，注意：最好该指定的元素要存放在body最外层，否则可能被其它的相对元素所影响</span><br><span class="line">        // area: [&apos;500px&apos;, &apos;542px&apos;],</span><br><span class="line">        success: function () &#123;</span><br><span class="line">          $(&apos;body&apos;).off(&apos;click&apos;, this_class);</span><br><span class="line">        &#125;,</span><br><span class="line">        end: function () &#123;</span><br><span class="line">          $(&apos;body&apos;).on(&apos;click&apos;, this_class, function () &#123;</span><br><span class="line">            var $this = $(this);</span><br><span class="line">            console.log(idx);</span><br><span class="line">            utils.showImg($this, idx);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /*展示图片新方法*/</span><br><span class="line">    photos: function (domClass) &#123;</span><br><span class="line">      var imgParent = $(&apos;img&apos;).parent();</span><br><span class="line">      if (domClass) &#123;</span><br><span class="line">        imgParent = $(`.$&#123;domClass&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">      imgParent.each(function (i) &#123;</span><br><span class="line">        let id = $(this).attr(&apos;id&apos;);</span><br><span class="line">        if (id) &#123;</span><br><span class="line">          layer.photos(&#123;</span><br><span class="line">            photos: `#$&#123;id&#125;`,</span><br><span class="line">            anim: 5</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 关闭layer的iframe窗口 */</span><br><span class="line">    closeIframe: function () &#123;</span><br><span class="line">      var index = parent.layer.getFrameIndex(window.name);</span><br><span class="line">      parent.layer.close(index)</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 获取url参数，返回值为object */</span><br><span class="line">    args: function (params) &#123;</span><br><span class="line">      var a = &#123;&#125;;</span><br><span class="line">      params = params || location.search;</span><br><span class="line">      if (!params) return &#123;&#125;;</span><br><span class="line">      params = decodeURI(params);</span><br><span class="line">      params.replace(/(?:^\?|&amp;)([^=&amp;]+)(?:\=)([^=&amp;]+)(?=&amp;|$)/g, function (m, k, v) &#123;</span><br><span class="line">        a[k] = v;</span><br><span class="line">      &#125;);</span><br><span class="line">      return a;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 重置form表单方法，不会重置部分input的值 */</span><br><span class="line">    reset: function ($reset) &#123;</span><br><span class="line">      var $input = $($reset).closest(&apos;.layui-form&apos;).find(&quot;:input&quot;);</span><br><span class="line">      // var $select = $($reset).closest(&apos;.layui-form&apos;).find(&quot;select&quot;);</span><br><span class="line">      // console.log($input.not(&quot;:button, :submit, :reset,:disabled,[readonly]&quot;));</span><br><span class="line">      $input.not(&quot;:button, :submit, :reset,:disabled,[readonly]&quot;).val(&quot;&quot;);</span><br><span class="line">      $input.not(&quot;:disabled,[readonly]&quot;).removeAttr(&quot;checked&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /*模板渲染*/</span><br><span class="line">    tplRender: function (tplId, viewId, tplData, callback) &#123;</span><br><span class="line">      var $tplId, $viewId;</span><br><span class="line">      if (typeof (tplId) === &apos;string&apos;) &#123;</span><br><span class="line">        if (tplId.indexOf(&apos;#&apos;) === -1) &#123;</span><br><span class="line">          $tplId = document.getElementById(tplId);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          $tplId = document.getElementById(tplId.substring(1));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if (typeof (viewId) === &apos;string&apos;) &#123;</span><br><span class="line">        if (viewId.indexOf(&apos;#&apos;) === -1) &#123;</span><br><span class="line">          $viewId = document.getElementById(viewId);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          $viewId = document.getElementById(viewId.substring(1));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      var getTpl, view;</span><br><span class="line">      if ($tplId) &#123;</span><br><span class="line">        getTpl = $tplId.innerHTML;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        getTpl = tplId.innerHTML;</span><br><span class="line">      &#125;</span><br><span class="line">      if ($viewId) &#123;</span><br><span class="line">        view = $viewId;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        view = viewId;</span><br><span class="line">      &#125;</span><br><span class="line">      var data = tplData || true;</span><br><span class="line">      // console.log(data)</span><br><span class="line">      laytpl(getTpl).render(</span><br><span class="line">        data,</span><br><span class="line">        function (html) &#123;</span><br><span class="line">          view.innerHTML = html;</span><br><span class="line">          callback &amp;&amp; callback();</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    /* 给没有http开头的图片修改成完整的图片地址 */</span><br><span class="line">    ossUrl: &apos;http://garment-scm.oss-cn-hangzhou.aliyuncs.com/&apos;,</span><br><span class="line">    imgUrl: function (img, size, url) &#123;</span><br><span class="line">      let newUrl = img;</span><br><span class="line">      let baseUrl = url || this.ossUrl;</span><br><span class="line">      let urlAfter = size || &apos;&apos;;</span><br><span class="line">      if (size === &apos;sm&apos;) &#123;</span><br><span class="line">        urlAfter = &apos;?x-oss-process=image/resize,w_132,h_132&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">      if (size === &apos;lg&apos;) &#123;</span><br><span class="line">        urlAfter = &apos;?x-oss-process=image/resize,w_800,h_800&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">      if (img.indexOf(&apos;http&apos;) === -1) &#123;</span><br><span class="line">        // newUrl=baseUrl+newUrl;</span><br><span class="line">        newUrl = baseUrl + newUrl + urlAfter;</span><br><span class="line">      &#125;</span><br><span class="line">      return newUrl;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 给没有http开头的网址添加成完整的网址 */</span><br><span class="line">    httpUrl: function (url) &#123;</span><br><span class="line">      let newUrl = url;</span><br><span class="line">      if (url.indexOf(&apos;http&apos;) === -1) &#123;</span><br><span class="line">        newUrl = &apos;http://&apos; + newUrl;</span><br><span class="line">      &#125;</span><br><span class="line">      return newUrl;</span><br><span class="line">    &#125;,</span><br><span class="line">    strSubstr(str, index) &#123;</span><br><span class="line">      let num = this.ossUrl.length;</span><br><span class="line">      let idx = index || 0;</span><br><span class="line">      let newStr = str.substr(idx, num)</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 把图片名称组成的字符串转换成数组Array */</span><br><span class="line">    strToArr: function (str, separator) &#123;</span><br><span class="line">      var splitStr = separator || &apos;|&apos;;</span><br><span class="line">      var Arr = [];</span><br><span class="line">      if (str) &#123;</span><br><span class="line">        Arr = str.split(splitStr)</span><br><span class="line">      &#125;</span><br><span class="line">      return Arr;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 把图片名称组成的数组Array转换成字符串String */</span><br><span class="line">    arrToStr: function (arr, separator) &#123;</span><br><span class="line">      var splitStr = separator || &apos;|&apos;;</span><br><span class="line">      var Str = arr.join(splitStr);</span><br><span class="line">      if (arr.length === 1) &#123;</span><br><span class="line">        Str = arr[0]</span><br><span class="line">      &#125;</span><br><span class="line">      if (arr.length === 0) &#123;</span><br><span class="line">        Str = &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">      return Str;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*数组去重*/</span><br><span class="line">    arrNoRep: function (arr) &#123;</span><br><span class="line">      for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (arr.indexOf(arr[i]) != i) &#123;</span><br><span class="line">          arr.splice(i, 1);//删除数组元素后数组长度减1后面的元素前移</span><br><span class="line">          i--;//数组下标回退</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return arr;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*数组相减*/</span><br><span class="line">    arrMinus: function (a, b) &#123;</span><br><span class="line">      let lg=[],sm=[];</span><br><span class="line">      if(a.length&gt;=b.length)&#123;</span><br><span class="line">        lg=a.concat();</span><br><span class="line">        sm=b.concat();</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        lg=b.concat();</span><br><span class="line">        sm=a.concat();</span><br><span class="line">      &#125;</span><br><span class="line">      // console.log(lg,sm)</span><br><span class="line">      for (var i = lg.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        a = lg[i];</span><br><span class="line">        for (var j = sm.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">          b = sm[j];</span><br><span class="line">          if (a == b) &#123;</span><br><span class="line">            lg.splice(i, 1);</span><br><span class="line">            sm.splice(j, 1);</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return lg;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*添加图片*/</span><br><span class="line">    _addItimImg: function (&#123;elemId, hiddenId, list, picture, one = true&#125;) &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      // console.log(&apos;_addItimImg:&apos;,$(hiddenId).val());</span><br><span class="line">      let valArr = utils.strToArr($(hiddenId).val());</span><br><span class="line"></span><br><span class="line">      valArr[valArr.length] = picture;</span><br><span class="line">      let valNew = utils.arrToStr(valArr);</span><br><span class="line">      let $list = $(elemId).closest(&apos;.js-upload-group&apos;).find(list);</span><br><span class="line"></span><br><span class="line">      let newId = &apos;id&apos; + (new Date().getTime());</span><br><span class="line">      let $item = `&lt;div class=&quot;layui-upload-item&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;layui-upload-item__child&quot; id=&quot;$&#123;newId&#125;&quot;&gt;</span><br><span class="line">                      &lt;img layer-src=&quot;$&#123;this.imgUrl(picture)&#125;&quot; src=&quot;$&#123;this.imgUrl(picture)&#125;&quot;&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;a href=&quot;javascript:;&quot; class=&quot;layui-upload-img-del js-upload-img-del&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;`;</span><br><span class="line">      if (one) &#123;</span><br><span class="line">        $list.html($item);</span><br><span class="line">        valNew = picture</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $list.append($item);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $(hiddenId).val(valNew);</span><br><span class="line">      layer.msg(&apos;上传成功&apos;, &#123;</span><br><span class="line">        icon: 1,</span><br><span class="line">        time: 800</span><br><span class="line">      &#125;, function () &#123;</span><br><span class="line">        that.photos();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /*删除图片列表中的图片*/</span><br><span class="line">    _delItemImg: function (&#123;$this, hiddenId, item&#125;) &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      // const itemId = $($this).closest(item).attr(&apos;id&apos;);</span><br><span class="line">      layer.confirm(&apos;确定要删除该图片吗？&apos;, &#123;</span><br><span class="line">        icon: 2</span><br><span class="line">      &#125;, function (index) &#123;</span><br><span class="line">        layer.close(index);</span><br><span class="line">        let thisFullSrc = $($this).closest(item).find(&apos;img&apos;).attr(&apos;src&apos;);</span><br><span class="line">        console.log(thisFullSrc)</span><br><span class="line">        let thisSrc = utils.strSubstr(thisFullSrc);</span><br><span class="line">        let imgStr = $(hiddenId).val();</span><br><span class="line">        let imgArr = utils.strToArr(imgStr);</span><br><span class="line">        let arrIndex = $.inArray(thisSrc, imgArr);</span><br><span class="line">        imgArr.splice(arrIndex, 1);</span><br><span class="line">        let newImgStr = utils.arrToStr(imgArr);</span><br><span class="line">        $(hiddenId).val(newImgStr)</span><br><span class="line">        $($this).closest(item).remove();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    /*自定义input验证*/</span><br><span class="line">    verify: function () &#123;</span><br><span class="line">      form.verify(&#123;</span><br><span class="line">        nickname: function (value, item) &#123; //value：表单的值、item：表单的DOM对象</span><br><span class="line">          if (!new RegExp(&quot;^[a-zA-Z0-9_\u4e00-\u9fa5\\s·]+$&quot;).test(value)) &#123;</span><br><span class="line">            return &apos;用户名不能有特殊字符&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">          if (/(^\_)|(\__)|(\_+$)/.test(value)) &#123;</span><br><span class="line">            return &apos;用户名首尾不能出现下划线\&apos;_\&apos;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">          if (/^\d+\d+\d$/.test(value)) &#123;</span><br><span class="line">            return &apos;用户名不能全为数字&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //我们既支持上述函数式的方式，也支持下述数组的形式</span><br><span class="line">        //数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]</span><br><span class="line">        ,</span><br><span class="line">        pass: [</span><br><span class="line">          /^[\S]&#123;6,12&#125;$/, &apos;密码必须6到12位，且不能出现空格&apos;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        //确认密码</span><br><span class="line">        ,</span><br><span class="line">        repass: function (value) &#123;</span><br><span class="line">          if (value !== $(&apos;#newPassword&apos;).val()) &#123;</span><br><span class="line">            return &apos;两次密码输入不一致&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        positiveInteger: [</span><br><span class="line">          /^(0|[1-9]\d*)$/, &apos;请输入正整数&apos;</span><br><span class="line">        ],</span><br><span class="line">        money: [</span><br><span class="line">          /(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/, &apos;金额只能保留小数点后两位&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 过滤掉formData的空值 */</span><br><span class="line">    formDataFilter: function (object) &#123;</span><br><span class="line">      for (key in object) &#123;</span><br><span class="line">        if (object[key] === &apos;&apos;) &#123;</span><br><span class="line">          delete object[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return object</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 获取table数据,在回调函数callback里渲染table */</span><br><span class="line">    tableReq: function (options) &#123;</span><br><span class="line">      let formData = options.formData,</span><br><span class="line">        url = `$&#123;baseUrl&#125;$&#123;options.url&#125;`,</span><br><span class="line">        type = options.type || &apos;GET&apos;,</span><br><span class="line">        dataType = options.dataType || &apos;json&apos;,</span><br><span class="line">        data = this.formDataFilter(options.data),</span><br><span class="line">        callback = options.callback;</span><br><span class="line">      admin.req(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        type: type,</span><br><span class="line">        dataType: dataType,</span><br><span class="line">        data: data,</span><br><span class="line">        done: function (res) &#123;</span><br><span class="line">          callback &amp;&amp; callback(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 判断小屏，弹出层全屏 */</span><br><span class="line">    full: function (layerName) &#123;</span><br><span class="line">      let screenNum = admin.screen();</span><br><span class="line">      if (screenNum === 0) &#123;</span><br><span class="line">        layer.full(layerName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  /* 清空form数据 */</span><br><span class="line"></span><br><span class="line">  var $dateRest = $(&apos;.layui-form [type=&quot;reset&quot;]&apos;);</span><br><span class="line"></span><br><span class="line">  $($dateRest).on(&apos;click&apos;, function () &#123;</span><br><span class="line">    utils.reset($(this));</span><br><span class="line">    form.render();</span><br><span class="line">    return false;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 输出test接口</span><br><span class="line">  exports(&apos;utils&apos;, utils);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个utils.js主要用于layui中&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>测试七牛云图片</title>
    <link href="http://blog.xuziyu.cn/%E6%B5%8B%E8%AF%95%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E7%89%87.html"/>
    <id>http://blog.xuziyu.cn/测试七牛云图片.html</id>
    <published>2018-09-15T01:07:09.000Z</published>
    <updated>2019-03-16T07:34:33.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="image-gooffwork-club"><a href="#image-gooffwork-club" class="headerlink" title="image.gooffwork.club"></a>image.gooffwork.club</h3><p><img src="http://image.gooffwork.club/avatar.jpg" alt="头像"></p><h3 id="image-xuziyu-cn"><a href="#image-xuziyu-cn" class="headerlink" title="image.xuziyu.cn"></a>image.xuziyu.cn</h3><p><img src="http://image.xuziyu.cn/avatar.jpg" alt="头像"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;image-gooffwork-club&quot;&gt;&lt;a href=&quot;#image-gooffwork-club&quot; class=&quot;headerlink&quot; title=&quot;image.gooffwork.club&quot;&gt;&lt;/a&gt;image.gooffwork.club&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>把微信小程序异步API封装成为Promise，简化异步调用</title>
    <link href="http://blog.xuziyu.cn/%E6%8A%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%82%E6%AD%A5API%E5%B0%81%E8%A3%85%E6%88%90%E4%B8%BAPromise%EF%BC%8C%E7%AE%80%E5%8C%96%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8.html"/>
    <id>http://blog.xuziyu.cn/把微信小程序异步API封装成为Promise，简化异步调用.html</id>
    <published>2018-09-14T09:10:00.000Z</published>
    <updated>2019-03-16T07:34:33.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把微信小程序异步API封装为Promise。用Promise处理异步操作会非常方便。</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><hr><p>参考文章：<a href="https://github.com/tornoda/to-promise" target="_blank" rel="noopener">把微信小程序异步api转化为Promise，方便异步编程 </a><br><strong>核心代码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">const toPromise = (wx) =&gt; &#123;</span><br><span class="line">  return (method) =&gt; &#123;</span><br><span class="line">    return (option) =&gt; &#123;</span><br><span class="line">      return new Promise ((resolve, reject) =&gt; &#123;</span><br><span class="line">        wx[method](&#123;</span><br><span class="line">          ...option,</span><br><span class="line">          success: (res) =&gt; &#123; resolve(res) &#125;,</span><br><span class="line">          fail: (err) =&gt; &#123; reject(err) &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default toPromise</span><br></pre></td></tr></table></figure></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>1.在需要用到的地方引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import toPromise from &apos;/module/to-promise/src/index&apos;</span><br></pre></td></tr></table></figure></p><p>2.绑定微信全局对象<code>(wx)</code>到函数，以便可以取到微信得API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const toPromiseWx = toPromise(wx)</span><br></pre></td></tr></table></figure></p><p>3.开始转化你需要得异步API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//apiName为微信异步方法名，如对wx.request()进行转化</span><br><span class="line">const request = toPromiseWx(&apos;request&apos;)</span><br><span class="line">//直接使用request方法</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import toPromise from &apos;/module/to-promise/src/index&apos;</span><br><span class="line"></span><br><span class="line">//转换wx.getStorage()</span><br><span class="line">const getStorage = toPromsie(wx)(&apos;getStorage&apos;) </span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">getStorage(&#123; key: &apos;test&apos; &#125;)</span><br><span class="line">  .then(</span><br><span class="line">    (res) =&gt; &#123;</span><br><span class="line">      //res的值与wx.getStorage(&#123; success: (res) =&gt; &#123;&#125; &#125;)中的res值一样</span><br><span class="line">      //res = &#123;data: &apos;keyValue&apos;&#125;</span><br><span class="line">      console.log(res.data)//控制台打印storage中key对于的value</span><br><span class="line">      return res.data//如果需要继续链式调用转化后的api，需要把值显示返回</span><br><span class="line">    &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      //err的值与wx.getStorage(&#123; success: (err) =&gt; &#123;&#125; &#125;)中的err值一样</span><br><span class="line">      throw err</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><hr><p>参考文章：<a href="https://segmentfault.com/a/1190000013150196" target="_blank" rel="noopener">微信小程序：使用Promise简化回调</a><br>因为微信小程序异步api都是success和fail的形式，所有有人封装了这样一个方法(<strong>核心方法</strong>):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//promisify.js</span><br><span class="line">const promisify = (api) =&gt; &#123;</span><br><span class="line">    return (options, ...params) =&gt; &#123;</span><br><span class="line">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            api(Object.assign(&#123;&#125;, options, &#123; success: resolve, fail: reject &#125;), ...params);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default promisify</span><br></pre></td></tr></table></figure></p><p>简单示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 获取系统信息</span><br><span class="line">wx.getSystemInfo(&#123;</span><br><span class="line">    success: res =&gt; &#123;</span><br><span class="line">        // success</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: res =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用上面的<code>promisify.js</code>简化后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import promisify from &apos;./promisify&apos;</span><br><span class="line">const getSystemInfo = promisify(wx.getSystemInfo)</span><br><span class="line"></span><br><span class="line">getSystemInfo().then(res=&gt;&#123;</span><br><span class="line">    // success</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;).catch(res=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>复杂的例子</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 模拟获取code，然后将code传给后台，成功后获取userinfo，再将userinfo传给后台</span><br><span class="line">// 登录</span><br><span class="line">wx.login(&#123;</span><br><span class="line">    success: res =&gt; &#123;</span><br><span class="line">        let code = res.code</span><br><span class="line">        // 请求</span><br><span class="line">        imitationPost(&#123;</span><br><span class="line">            url: &apos;/test/loginWithCode&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                code</span><br><span class="line">            &#125;,</span><br><span class="line">            success: data =&gt; &#123;</span><br><span class="line">                // 获取userInfo</span><br><span class="line">                wx.getUserInfo(&#123;</span><br><span class="line">                    success: res =&gt; &#123;</span><br><span class="line">                        let userInfo = res.userInfo</span><br><span class="line">                        // 请求</span><br><span class="line">                        imitationPost(&#123;</span><br><span class="line">                            url: &apos;/test/saveUserInfo&apos;,</span><br><span class="line">                            data: &#123;</span><br><span class="line">                                userInfo</span><br><span class="line">                            &#125;,</span><br><span class="line">                            success: data =&gt; &#123;</span><br><span class="line">                                console.log(data)</span><br><span class="line">                            &#125;,</span><br><span class="line">                            fail: res =&gt; &#123;</span><br><span class="line">                                console.log(res)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fail: res =&gt; &#123;</span><br><span class="line">                        console.log(res)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: res =&gt; &#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用 <code>promisify.js</code> 简化后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import promisify from &apos;./promisify&apos;</span><br><span class="line">const login = promisify(wx.login)</span><br><span class="line">const getSystemInfo = promisify(wx.getSystemInfo)</span><br><span class="line"></span><br><span class="line">// 登录</span><br><span class="line">login().then(res =&gt; &#123;</span><br><span class="line">    let code = res.code</span><br><span class="line">    // 请求</span><br><span class="line">    pImitationPost(&#123;</span><br><span class="line">        url: &apos;/test/loginWithCode&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            code</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;).then(data =&gt; &#123;</span><br><span class="line">        // 获取userInfo</span><br><span class="line">        getUserInfo().then(res =&gt; &#123;</span><br><span class="line">            let userInfo = res.userInfo</span><br><span class="line">            // 请求</span><br><span class="line">            pImitationPost(&#123;</span><br><span class="line">                url: &apos;/test/saveUserInfo&apos;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    userInfo</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;).then(data =&gt; &#123;</span><br><span class="line">                console.log(data)</span><br><span class="line">            &#125;).catch(res =&gt; &#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).catch(res =&gt; &#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).catch(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到简化效果非常明显，赶紧把小程序的异步调用API统统封装一遍，就可以愉快的开发小程序了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;把微信小程序异步API封装为Promise。用Promise处理异步操作会非常方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://github.com/tornoda/to-promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;把微信小程序异步api转化为Promise，方便异步编程 &lt;/a&gt;&lt;br&gt;&lt;strong&gt;核心代码&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const toPromise = (wx) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (method) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (option) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return new Promise ((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wx[method](&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...option,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          success: (res) =&amp;gt; &amp;#123; resolve(res) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          fail: (err) =&amp;gt; &amp;#123; reject(err) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export default toPromise&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h4&gt;&lt;p&gt;1.在需要用到的地方引入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import toPromise from &amp;apos;/module/to-promise/src/index&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.绑定微信全局对象&lt;code&gt;(wx)&lt;/code&gt;到函数，以便可以取到微信得API&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const toPromiseWx = toPromise(wx)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.开始转化你需要得异步API&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//apiName为微信异步方法名，如对wx.request()进行转化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const request = toPromiseWx(&amp;apos;request&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//直接使用request方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://blog.xuziyu.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="es6" scheme="http://blog.xuziyu.cn/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>前端好用的框架及工具</title>
    <link href="http://blog.xuziyu.cn/%E5%89%8D%E7%AB%AF%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%B7%A5%E5%85%B7.html"/>
    <id>http://blog.xuziyu.cn/前端好用的框架及工具.html</id>
    <published>2018-09-12T01:34:00.000Z</published>
    <updated>2019-03-16T07:34:33.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Taro-UI"><a href="#Taro-UI" class="headerlink" title="Taro UI"></a><a href="https://taro-ui.aotu.io/#/" target="_blank" rel="noopener">Taro UI</a></h2><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>Taro UI</code> 是一款基于 <a href="https://taro.aotu.io/" target="_blank" rel="noopener">Taro</a> 框架开发的多端 UI 组件库。<br><code>Taro</code> 是由 <a href="https://aotu.io/" target="_blank" rel="noopener">京东·凹凸实验室</a> 倾力打造的多端开发解决方案。现如今市面上端的形态多种多样，Web、ReactNative、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。<br>使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、RN 等）运行的代码。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>基于 <code>Taro</code> 开发 UI 组件</li><li>一套组件可以在 <code>微信小程序</code>，<code>H5</code>，<code>ReactNative</code> 等多端适配运行</li><li>提供友好的 API，可灵活的使用组件</li></ul><blockquote><p>开发者：京东</p></blockquote><h2 id="VUX"><a href="#VUX" class="headerlink" title="VUX"></a><a href="https://doc.vux.li/zh-CN/" target="_blank" rel="noopener">VUX</a></h2><hr><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://doc.vux.li/zh-CN/" target="_blank" rel="noopener">VUX</a>（读音 [v’ju:z]，同 views）是基于<code>WeUI</code>和<code>Vue(2.x)</code>开发的移动端 UI 组件库，主要服务于微信页面。<br>基于<code>webpack</code> + <code>vue-loader</code> + <code>vux</code>可以快速开发移动端页面，配合<code>vux-loader</code>方便你在<code>WeUI</code>的基础上定制需要的样式。<br><code>vux-loader</code>保证了组件按需使用，因此不用担心最终打包了整个 vux 的组件库代码。<br><code>VUX</code>并不完全依赖于<code>WeUI</code>，<code>VUX</code> 在 <code>WeUI</code> 的基础上扩展了多个常用组件，但是尽量保持整体 UI 样式接近<code>WeUI</code>的设计规范。</p><blockquote><p>个人开发者</p></blockquote><h2 id="Vant-Weapp"><a href="#Vant-Weapp" class="headerlink" title="Vant Weapp"></a><a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noopener">Vant Weapp</a></h2><hr><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noopener">Vant Weapp</a> 是有赞移动端组件库 <a href="https://github.com/youzan/vant" target="_blank" rel="noopener">Vant</a> 的 <strong>小程序</strong> 版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。</p><blockquote><p>开发者：有赞</p></blockquote><h2 id="Vant"><a href="#Vant" class="headerlink" title="Vant"></a><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">Vant</a></h2><hr><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>轻量、可靠的移动端 Vue 组件库</p><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ul><li>50+ 个经过有赞线上业务检验的组件</li><li>单元测试覆盖率超过 90%</li><li>完善的文档和示例</li><li>支持 <code>babel-plugin-import</code></li><li>支持 <code>TypeScript</code></li><li>支持 <code>SSR</code></li></ul><blockquote><p>开发者：有赞</p></blockquote><a id="more"></a><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a></h2><hr><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>网站快速成型工具<br>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><blockquote><p>开发者：饿了没</p></blockquote><h2 id="D2-Admin"><a href="#D2-Admin" class="headerlink" title="D2 Admin"></a><a href="https://doc.d2admin.fairyever.com/zh/" target="_blank" rel="noopener">D2 Admin</a></h2><hr><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>优雅的管理系统前端集成方案   </p><ul><li>ElementUI组件库<br>集成完善且强大的 ElementUI，随意搭配使用任何 ElementUI 组件。</li><li>模块化全局状态管理<br>D2Admin 的系统管理为独立模块，在此模块内根据功能划分为十几个模块，每个模块都分工明确。</li><li>丰富集成<br>已经为你准备好了很可能用到的插件和组件，专为 D2Admin 设计，或者来自第三方。</li><li>贴心小工具<br>为您准备了实用的 JavaScript Util 以及 CSS 常用类。  <blockquote><p>开发者：<a href="https://github.com/d2-projects/d2-admin" target="_blank" rel="noopener">FairyEver</a></p></blockquote></li></ul><h2 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint UI"></a><a href="https://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint UI</a></h2><hr><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>基于 Vue.js 的移动端组件库</p><h4 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h4><ul><li>Mint UI 包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要。通过它，可以快速构建出风格统一的页面，提升开发效率。</li><li>真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件，无需再纠结文件体积过大。</li><li>考虑到移动端的性能门槛，Mint UI 采用 CSS3 处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。</li><li>依托 Vue.js 高效的组件化方案，Mint UI 做到了轻量化。即使全部引入，压缩后的文件体积也仅有 ~30kb (JS + CSS) gzip。<blockquote><p>开发者：饿了没</p></blockquote></li></ul><h2 id="iView"><a href="#iView" class="headerlink" title="iView"></a><a href="https://www.iviewui.com/docs/guide/introduce" target="_blank" rel="noopener">iView</a></h2><hr><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>一套基于 Vue.js 的高质量 UI 组件库<br>只能用于 pc 端</p><blockquote><p>开发者：Aresn</p></blockquote><h2 id="iView-Weapp"><a href="#iView-Weapp" class="headerlink" title="iView Weapp"></a><a href="https://weapp.iviewui.com/" target="_blank" rel="noopener">iView Weapp</a></h2><hr><p>一套高质量的 <strong>微信小程序</strong> UI 组件库</p><blockquote><p>开发者：Aresn</p></blockquote><h2 id="Layui"><a href="#Layui" class="headerlink" title="Layui"></a><a href="https://www.layui.com/" target="_blank" rel="noopener">Layui</a></h2><hr><p>经典模块化前端框架<br>由职业前端倾情打造，面向所有层次的前后端开发者，零门槛开箱即用的前端 UI 解决方案</p><blockquote><p>开发者：言心</p></blockquote><h2 id="jQuery-WeUI"><a href="#jQuery-WeUI" class="headerlink" title="jQuery WeUI"></a><a href="https://jqweui.cn/" target="_blank" rel="noopener">jQuery WeUI</a></h2><hr><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p><code>jQuery WeUI</code> 是专为微信公众账号开发而设计的一个简洁而强大的 UI 库，包含全部 WeUI 官方的 CSS 组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间。</p><p><code>jQuery WeUI</code> 的最大特点是它只提供 UI 组件，并不会对项目所使用的框架和其他库有任何的限制，几乎可以在任何环境下使用。无论你的项目是基于<code>jQuery</code>，还是 <code>React</code>, <code>Angular</code>, <code>Vue</code>， 你都会发现 <code>jQuery WeUI</code> 能非常方便的和他们结合使用。既是你的项目是一个有很悠久历史的老项目，也几乎可以做到拿来即用。</p><p><code>jQuery WeUI</code> 提供了总共 30+ 个非常实用的组件：列表，表单，卡片，对话框，下拉刷新等。</p><blockquote><p>开发者：言川</p></blockquote><h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a><a href="https://ant.design/index-cn" target="_blank" rel="noopener">Ant Design</a></h2><hr><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><p>服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验。<br>基于 <code>Ant Design</code> 设计语言，我们提供了一套开箱即用的高质量 <code>React</code> 组件，用于开发和服务于企业级中后台产品，除官方的 <code>React</code> 实现，还有 <code>Angular</code>、<code>Vue</code> 的实现</p><blockquote><p>开发者：蚂蚁金服</p></blockquote><h2 id="ANT-DESIGN-PRO"><a href="#ANT-DESIGN-PRO" class="headerlink" title="ANT DESIGN PRO"></a><a href="https://pro.ant.design/index-cn" target="_blank" rel="noopener">ANT DESIGN PRO</a></h2><hr><h3 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h3><p>开箱即用的中台前端/设计解决方案</p><blockquote><p>开发者：蚂蚁金服</p></blockquote><h2 id="Ant-Design-Mobile"><a href="#Ant-Design-Mobile" class="headerlink" title="Ant Design Mobile"></a><a href="https://mobile.ant.design/index-cn" target="_blank" rel="noopener">Ant Design Mobile</a></h2><hr><h3 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h3><p>一个基于 <code>Preact</code> / <code>React</code> / <code>React Native</code> 的 UI 组件库</p><blockquote><p>开发者：蚂蚁金服</p></blockquote><h2 id="MinUI"><a href="#MinUI" class="headerlink" title="MinUI"></a><a href="https://github.com/meili/minui" target="_blank" rel="noopener">MinUI</a></h2><hr><h3 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h3><p><code>MinUI</code> 是蘑菇街前端开发团队开发的基于微信小程序自定义组件特性开发而成的一套简洁、易用、高效的组件库，适用场景广，覆盖小程序原生框架，各种小程序组件主流框架等，并且提供了专门的命令行工具。</p><blockquote><p>开发者：蘑菇街</p></blockquote><h2 id="Wux-WeApp"><a href="#Wux-WeApp" class="headerlink" title="Wux WeApp"></a><a href="https://github.com/wux-weapp/wux-weapp" target="_blank" rel="noopener">Wux WeApp</a></h2><hr><h3 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h3><p><code>Wux WeApp</code>也是一个非常不错的微信小程序自定义 UI 组件库，组件比较丰富，值得使用。</p><blockquote><p>开发者：skyvow</p></blockquote><h2 id="Touch-UI"><a href="#Touch-UI" class="headerlink" title="Touch UI"></a><a href="https://github.com/uileader/touchui" target="_blank" rel="noopener">Touch UI</a></h2><hr><h3 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h3><p><code>WeTouch</code>是 App 一站式快速开发平台，包含了 Touch UI 移动组件库、移动端常用 API、插件化机制、热更新、云端打包等内容。几乎囊括了开发移动应用的所有细节，真正实现拿来即用，像搭积木一样开发移动应用。使用它，你无需学习原生 native 开发，就可以一次拥有安卓 App、苹果 App 和 H5 等应用，极大地缩短项目周期。结合我们的<code>Touch WX</code>框架，还可以很方便的移植为微信小程序。<br><code>WeTouch</code>与<code>Touch UI</code>二者具有相同的开发方式，区别在于：<code>Touch UI</code>属于<code>WeTouch</code>的组件库部分，只能开发 H5 应用，而<code>WeTouch</code>包含了<code>Touch UI</code>，既能做 App 又能做 H5 应用。</p><h2 id="Touch-WX"><a href="#Touch-WX" class="headerlink" title="Touch WX"></a><a href="http://www.wetouch.net/wx.html" target="_blank" rel="noopener">Touch WX</a></h2><hr><h3 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h3><p><code>Touch WX</code>是一套完全免费的微信小程序开发框架，包含丰富的 UI 控件用于官方组件的补充。<br>与<code>WeTouch</code>开发方式很相似，也是通过 VSCode 编辑器+插件的方式开发，经过编译后输出小程序代码。<br>当你用<code>WeTouch</code>开发了应用，可以直接导入到 Touch WX 进行转换，稍作调整就能生成小程序。<br>反之也同样，当你<code>TouchUI WX</code>开发了微信小程序，可以导出为<code>Touch UI</code>工程来生成 H5 应用或 App。</p><hr><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="推妹子"><a href="#推妹子" class="headerlink" title="推妹子"></a><a href="https://tuimeizi.cn/" target="_blank" rel="noopener">推妹子</a></h2><hr><h3 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h3><p>最养眼的前端占位图</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Taro-UI&quot;&gt;&lt;a href=&quot;#Taro-UI&quot; class=&quot;headerlink&quot; title=&quot;Taro UI&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://taro-ui.aotu.io/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Taro UI&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Taro UI&lt;/code&gt; 是一款基于 &lt;a href=&quot;https://taro.aotu.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Taro&lt;/a&gt; 框架开发的多端 UI 组件库。&lt;br&gt;&lt;code&gt;Taro&lt;/code&gt; 是由 &lt;a href=&quot;https://aotu.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;京东·凹凸实验室&lt;/a&gt; 倾力打造的多端开发解决方案。现如今市面上端的形态多种多样，Web、ReactNative、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。&lt;br&gt;使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、RN 等）运行的代码。&lt;/p&gt;
&lt;h4 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基于 &lt;code&gt;Taro&lt;/code&gt; 开发 UI 组件&lt;/li&gt;
&lt;li&gt;一套组件可以在 &lt;code&gt;微信小程序&lt;/code&gt;，&lt;code&gt;H5&lt;/code&gt;，&lt;code&gt;ReactNative&lt;/code&gt; 等多端适配运行&lt;/li&gt;
&lt;li&gt;提供友好的 API，可灵活的使用组件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开发者：京东&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;VUX&quot;&gt;&lt;a href=&quot;#VUX&quot; class=&quot;headerlink&quot; title=&quot;VUX&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://doc.vux.li/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VUX&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;介绍-1&quot;&gt;&lt;a href=&quot;#介绍-1&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://doc.vux.li/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VUX&lt;/a&gt;（读音 [v’ju:z]，同 views）是基于&lt;code&gt;WeUI&lt;/code&gt;和&lt;code&gt;Vue(2.x)&lt;/code&gt;开发的移动端 UI 组件库，主要服务于微信页面。&lt;br&gt;基于&lt;code&gt;webpack&lt;/code&gt; + &lt;code&gt;vue-loader&lt;/code&gt; + &lt;code&gt;vux&lt;/code&gt;可以快速开发移动端页面，配合&lt;code&gt;vux-loader&lt;/code&gt;方便你在&lt;code&gt;WeUI&lt;/code&gt;的基础上定制需要的样式。&lt;br&gt;&lt;code&gt;vux-loader&lt;/code&gt;保证了组件按需使用，因此不用担心最终打包了整个 vux 的组件库代码。&lt;br&gt;&lt;code&gt;VUX&lt;/code&gt;并不完全依赖于&lt;code&gt;WeUI&lt;/code&gt;，&lt;code&gt;VUX&lt;/code&gt; 在 &lt;code&gt;WeUI&lt;/code&gt; 的基础上扩展了多个常用组件，但是尽量保持整体 UI 样式接近&lt;code&gt;WeUI&lt;/code&gt;的设计规范。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人开发者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vant-Weapp&quot;&gt;&lt;a href=&quot;#Vant-Weapp&quot; class=&quot;headerlink&quot; title=&quot;Vant Weapp&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://youzan.github.io/vant-weapp/#/intro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vant Weapp&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;介绍-2&quot;&gt;&lt;a href=&quot;#介绍-2&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://youzan.github.io/vant-weapp/#/intro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vant Weapp&lt;/a&gt; 是有赞移动端组件库 &lt;a href=&quot;https://github.com/youzan/vant&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vant&lt;/a&gt; 的 &lt;strong&gt;小程序&lt;/strong&gt; 版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发者：有赞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vant&quot;&gt;&lt;a href=&quot;#Vant&quot; class=&quot;headerlink&quot; title=&quot;Vant&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://youzan.github.io/vant/#/zh-CN/intro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vant&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;介绍-3&quot;&gt;&lt;a href=&quot;#介绍-3&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;轻量、可靠的移动端 Vue 组件库&lt;/p&gt;
&lt;h4 id=&quot;特性-1&quot;&gt;&lt;a href=&quot;#特性-1&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;50+ 个经过有赞线上业务检验的组件&lt;/li&gt;
&lt;li&gt;单元测试覆盖率超过 90%&lt;/li&gt;
&lt;li&gt;完善的文档和示例&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;babel-plugin-import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;TypeScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;SSR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开发者：有赞&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具" scheme="http://blog.xuziyu.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm-windows控制nodeJs版本</title>
    <link href="http://blog.xuziyu.cn/%E4%BD%BF%E7%94%A8nvm-windows%E6%8E%A7%E5%88%B6nodeJs%E7%89%88%E6%9C%AC.html"/>
    <id>http://blog.xuziyu.cn/使用nvm-windows控制nodeJs版本.html</id>
    <published>2018-06-14T06:04:00.000Z</published>
    <updated>2019-03-16T07:34:33.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为了在windows系统中切换不同开发环境的nodeJs版本依赖。决定使用<strong>nvm-windows</strong>来管理nodeJs版本。</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>下载<br>首先从<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm官网</a>下载安装包 ，选择setup版本的，解压后里面是一个exe，安装方式就如同一个常见的exe安装包，双击运行即可</li><li>配置nvm的安装位置，任意一个你喜欢的位置都可以（<strong>这个文件夹的名字一定不能含有中文或空格！</strong>）。</li><li><p>设置node的symlink文件夹位置。（<strong>这个文件夹的名字一定不能含有中文或空格！</strong>）</p><blockquote><p>上面两个步骤目录出现空格，在使用<code>nvm use</code>的时候会报错<code>exit status 1</code></p></blockquote></li><li><p>如果在安装nvm之前，电脑上就已经安装有node的，会看到如下图，询问你是否用nvm管理已经存在的node版本。一定要选<code>是</code>，这个弹窗可能会出现好几次，都点<code>是</code>。</p></li><li>安装完成<a id="more"></a><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3></li><li>检查nvm是否安装成功<br>使用管理员权限打开一个命令行。输入nvm v，会显示nvm的版本号，有则表示安装成功。</li><li>使用淘宝node镜像，使用淘宝npm镜像<br><code>nvm node_mirror https://npm.taobao.org/mirrors/node/</code><br><code>nvm npm_mirror https://npm.taobao.org/mirrors/npm/</code></li><li>安装指定版本的node： <code>nvm install 版本号</code><br>比如安装<code>8.11.3</code>：<br><code>nvm install 8.11.3</code></li><li>查看当前电脑上已经安装的全部node版本,正在使用中的版本号前有个<strong>星号</strong><code>*</code><br><code>nvm ls</code></li><li>切换nodeJs版本<br>比如使用<code>8.11.3</code>：<br><code>nvm use 8.11.3</code></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>安装指定版本的node： <code>nvm install 版本号</code><br><code>nvm install 8.9.3</code></li><li>使用指定版本的node： <code>nvm use 版本号</code><br><code>nvm use 8.9.3</code></li><li>使用淘宝node镜像：<code>nvm node_mirror</code><br><code>nvm node_mirror https://npm.taobao.org/mirrors/node/</code></li><li>使用淘宝npm镜像：<code>nvm npm_mirror</code><br><code>nvm npm_mirror https://npm.taobao.org/mirrors/npm/</code></li><li>查看当前电脑上已经安装的全部node版本,正在使用中的版本号前有个<strong>星号</strong><code>*</code>：<br><code>nvm ls</code></li><li>查看可用的（可下载的）全部node版本：<br><code>nvm ls available</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了在windows系统中切换不同开发环境的nodeJs版本依赖。决定使用&lt;strong&gt;nvm-windows&lt;/strong&gt;来管理nodeJs版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;下载&lt;br&gt;首先从&lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm官网&lt;/a&gt;下载安装包 ，选择setup版本的，解压后里面是一个exe，安装方式就如同一个常见的exe安装包，双击运行即可&lt;/li&gt;
&lt;li&gt;配置nvm的安装位置，任意一个你喜欢的位置都可以（&lt;strong&gt;这个文件夹的名字一定不能含有中文或空格！&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置node的symlink文件夹位置。（&lt;strong&gt;这个文件夹的名字一定不能含有中文或空格！&lt;/strong&gt;）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面两个步骤目录出现空格，在使用&lt;code&gt;nvm use&lt;/code&gt;的时候会报错&lt;code&gt;exit status 1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果在安装nvm之前，电脑上就已经安装有node的，会看到如下图，询问你是否用nvm管理已经存在的node版本。一定要选&lt;code&gt;是&lt;/code&gt;，这个弹窗可能会出现好几次，都点&lt;code&gt;是&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;安装完成
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="环境配置" scheme="http://blog.xuziyu.cn/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="nvm" scheme="http://blog.xuziyu.cn/tags/nvm/"/>
    
      <category term="node" scheme="http://blog.xuziyu.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>layui&amp;layuiAdmin 爬坑文档</title>
    <link href="http://blog.xuziyu.cn/layui-layuiAdmin%E7%88%AC%E5%9D%91%E6%96%87%E6%A1%A3.html"/>
    <id>http://blog.xuziyu.cn/layui-layuiAdmin爬坑文档.html</id>
    <published>2018-06-06T01:10:48.000Z</published>
    <updated>2019-03-16T07:34:33.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-数据更新，工具栏无法联动变化"><a href="#table-数据更新，工具栏无法联动变化" class="headerlink" title="table 数据更新，工具栏无法联动变化"></a>table 数据更新，工具栏无法联动变化</h2><hr><blockquote><p><strong>原因</strong>：table 对非对应 field 更新数据是无法响应的。没有 templet 字段就没法让 update()识别。</p></blockquote><a id="more"></a><ul><li>将工具栏和变动状态栏合并。缺点是<strong>table 结构限制</strong>，优点是<strong>代码简单</strong>。<blockquote><p>方案一 把工具栏和相关联的 field 的合并，工具栏需要添加 templet:#tool_ID 用来让 update()识别，从而更新完成,必须是 withdraw_state 这一列没有，可以有更好的展示效果</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;table id=<span class="string">"tableAccount"</span> lay-filter=<span class="string">"tableAccount"</span>&gt;&lt;/table&gt;</span><br><span class="line">&lt;!-- 将提现状态和操作合并到一栏 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"tableToolBar"</span>&gt;</span><br><span class="line">  &#123;&#123;# if(d.withdraw_state == 'default')&#123; &#125;&#125;</span><br><span class="line">  &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn layui-btn-xs"</span> lay-event=<span class="string">"success"</span>&gt;通过&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;a class="layui-btn layui-btn-xs layui-btn-danger" lay-event="fail"&gt;驳回&lt;/</span>a&gt;</span><br><span class="line">  &#123;&#123;# &#125; else if(d.withdraw_state == 'success')&#123; &#125;&#125;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-badge layui-bg-gray"</span>&gt;已成功&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123;# &#125; else if(d.withdraw_state == 'fail')&#123; &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;span class="layui-badge layui-bg-gray"&gt;已失败&lt;/</span>span&gt;</span><br><span class="line">  &#123;&#123;# &#125; &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  field: <span class="string">'withdraw_state'</span>,</span><br><span class="line">  title: <span class="string">'操作'</span>,</span><br><span class="line">  fixed: <span class="string">'right'</span>,</span><br><span class="line">  width: <span class="number">180</span>,</span><br><span class="line">  align: <span class="string">'center'</span>,</span><br><span class="line">  templet: <span class="string">'#tableToolBar'</span>,</span><br><span class="line">  toolbar: <span class="string">'#tableToolBar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>.update()</code>更新 table 数据，然后工具栏会变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.update(&#123;</span><br><span class="line">  withdraw_state: <span class="string">'success'</span>,</span><br><span class="line">  withdraw_time: time,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用 layui 的 laytpl 来对工具栏进行更新。缺点是<strong>代码量大，逻辑复杂</strong>，优点是<strong>适用性强</strong>。<blockquote><p>方案二 使用 updata 更新 table,<br>原因：因为不是对应 field 的数据，所以[data-field=”toolStatus”]所在的工具条不支持更新， 1.只能通过使用 laytpl 获取到更新后的代码模板， 2.操纵 tr = obj.tr 找到 tool 对应的 field(‘td[data-field=”toolStatus”]’),找到对饮 field 下面的的 div 用 html()更新 tool 内容 。</p></blockquote></li></ul><p>状态和操作是分开两列的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> field: <span class="string">'withdraw_state'</span>,</span><br><span class="line">  title: <span class="string">'提现状态'</span>,</span><br><span class="line">  templet: <span class="string">'#withdraw_state'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"> field: <span class="string">'toolStatus'</span>,</span><br><span class="line">  title: <span class="string">'操作'</span>,</span><br><span class="line">  fixed: <span class="string">'right'</span>,</span><br><span class="line">  width: <span class="number">180</span>,</span><br><span class="line">  align: <span class="string">'center'</span>,</span><br><span class="line">  templet: <span class="string">'#tableToolBar'</span>,</span><br><span class="line">  toolbar: <span class="string">'#tableToolBar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1527837613</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> time = utils.formatTime(timestamp);</span><br><span class="line">obj.update(&#123;</span><br><span class="line">  withdraw_state: <span class="string">'success'</span>,</span><br><span class="line">  withdraw_time: time,</span><br><span class="line">&#125;);</span><br><span class="line">data.withdraw_state = <span class="string">'success'</span>;</span><br><span class="line">laytpl(tableToolBar.innerHTML).render(obj.data, <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//tableToolBar为toolbar的script模板id</span></span><br><span class="line">  toolhtml = html;</span><br><span class="line">&#125;);</span><br><span class="line">tr.children(<span class="string">'td[data-field="toolStatus"]'</span>)</span><br><span class="line">  .children(<span class="string">'div'</span>)</span><br><span class="line">  .html(toolhtml); <span class="comment">//toolStatus为当前表格工具列是表格的第几列</span></span><br></pre></td></tr></table></figure><ul><li>重载 table 的当前页，缺陷是<strong>可能 table 的数据量变化，导致当前行不在当前页了</strong>，优点是<strong>代码量少</strong>。<blockquote><p>方案三 使用<code>.layui-laypage-btn</code><em>(表格分页中的确定按钮)</em>，重载当前页面</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.layui-laypage-btn'</span>).trigger(<span class="string">'click'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-数据更新，工具栏无法联动变化&quot;&gt;&lt;a href=&quot;#table-数据更新，工具栏无法联动变化&quot; class=&quot;headerlink&quot; title=&quot;table 数据更新，工具栏无法联动变化&quot;&gt;&lt;/a&gt;table 数据更新，工具栏无法联动变化&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：table 对非对应 field 更新数据是无法响应的。没有 templet 字段就没法让 update()识别。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建py文件时自定义头部模板</title>
    <link href="http://blog.xuziyu.cn/%E5%88%9B%E5%BB%BApy%E6%96%87%E4%BB%B6%E6%97%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B4%E9%83%A8%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://blog.xuziyu.cn/创建py文件时自定义头部模板.html</id>
    <published>2018-06-06T01:10:05.000Z</published>
    <updated>2019-03-16T07:34:33.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm:"></a>Pycharm:</h2><blockquote><p>打开软件进行设置，默认使用utf-8格式<br>File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Python Script<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"># @Author  : Aries</span></span><br><span class="line"><span class="comment"># @Site    : $&#123;SITE&#125;</span></span><br><span class="line"><span class="comment"># @File    : $&#123;NAME&#125;.py</span></span><br><span class="line"><span class="comment"># @Software: $&#123;PRODUCT_NAME&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pycharm&quot;&gt;&lt;a href=&quot;#Pycharm&quot; class=&quot;headerlink&quot; title=&quot;Pycharm:&quot;&gt;&lt;/a&gt;Pycharm:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打开软件进行设置，默认使用utf-8格式&lt;br&gt;File-&amp;gt;se
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue3.0快速创建项目&amp;配置</title>
    <link href="http://blog.xuziyu.cn/vue3-0%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE-%E9%85%8D%E7%BD%AE.html"/>
    <id>http://blog.xuziyu.cn/vue3-0快速创建项目-配置.html</id>
    <published>2018-05-25T04:51:00.000Z</published>
    <updated>2019-03-16T07:34:33.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地安装vue-cli"><a href="#本地安装vue-cli" class="headerlink" title="本地安装vue-cli"></a>本地安装vue-cli</h2><hr><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>更新npm到最新版本  <blockquote><p>命令行运行:<br><code>npm install -g npm</code><br>npm就自动为我们更新到最新版本  </p></blockquote></li><li>淘宝npm镜像使用方法<blockquote><p><code>npm config set registry https://registry.npm.taobao.org</code><br><code>cnpm config set registry https://registry.npm.taobao.org</code><br><code>yarn config set registry https://registry.npm.taobao.org</code><br>配置后可通过下面方式来验证是否成功 ：<br>  <code>npm config get registry</code></p></blockquote></li><li>使用 npm 全局安装 vue-cli ：<br><code>npm i -g @vue/cli@3.0.0-beta.6</code>  </li></ul><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><hr><ol><li>执行：<br><code>vue create my-project</code>  </li><li>此处有两个选择：  <ul><li><code>default (babel, eslint)</code>默认套餐，提供<code>babel</code>和<code>eslint</code>支持  </li><li><code>Manually select features</code>自己去选择需要的功能，提供更多的特性选择。比如如果想要支持 TypeScript ，就应该选择这一项。</li><li>可以使用<code>上下方向键</code>来切换选项。如果只需要 <code>babel</code> 和 <code>eslint</code> 支持，那么选择第一项，就完事了，静静等待 vue 初始化项目。</li><li>vue-cli 内置支持了8个功能特性，可以多选：使用方向键在特性选项之间切换，使用空格键选中当前特性，使用 a 键切换选择所有，使用 i 键翻转选项。</li><li>对于每一项的功能，此处做个简单描述：<ul><li><code>TypeScript</code> 支持使用 <code>TypeScript</code> 书写源码</li><li><code>Progressive Web App (PWA) Support</code> PWA 支持。</li><li><code>Router</code> 支持 vue-router 。</li><li><code>Vuex</code> 支持 vuex 。</li><li><code>CSS Pre-processors</code> 支持 CSS 预处理器。</li><li><code>Linter / Formatter</code> 支持代码风格检查和格式化。</li><li><code>Unit Testing</code> 支持单元测试。</li><li><code>E2E Testing</code> 支持 E2E 测试。  </li></ul></li><li>我选择了 <code>Router</code>，<code>Vuex</code>，<code>CSS Pre-processors</code>，<code>Linter / Formatter</code>  </li></ul></li><li>按住enter进入下一步，接下来都是对之前每项选项的更详细的选择。  <ul><li><strong>css</strong>选择<code>SCSS/SASS</code></li><li><strong>Linter / Formatter</strong>选择<code>prettier</code>  </li><li>这一步就是要选择配置文件的位置了。对于 <code>Babel</code> 、 <code>PostCSS</code> 等，都可以有自己的配置文件： <code>.babelrc</code> 、 <code>.postcssrc</code> 等等，同时也可以把配置信息放在 <code>package.json</code> 里面。此处出于对编辑器（ Visual Studio Code ）的友好支持（编辑器一般默认会在项目根目录下寻找配置文件），选择把配置文件放在外面，选择 <code>In dedicated config files</code></li><li>待补充  </li></ul></li><li><code>Save this as a preset for future projects?</code>这个就是问要不要把当前的这一系列选项配置保存起来，方便下一次创建项目时复用。选择<code>y</code>。</li><li>选完之后， vue-cli 就根据前面选择的内容，开始初始化项目了。</li></ol><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><hr><p>初始完之后，进入到项目根目录：<br><code>cd my-project</code><br>启动项目：<br><code>npm run serve</code><br>稍等一会儿，可以看到自动在浏览器中打开了  </p><h4 id="安装PostCSS插件"><a href="#安装PostCSS插件" class="headerlink" title="安装PostCSS插件"></a>安装PostCSS插件</h4><ul><li>通过<code>Vue-cli</code>构建的项目，在项目的根目录下有一个<code>.postcssrc.js</code>，默认情况下已经有了：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">        plugins: &#123;</span><br><span class="line">          autoprefixer: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line">配置成</span><br></pre></td></tr></table></figure></li></ul><p>module.exports = {<br>        plugins: {<br>          “postcss-import”:{},<br>          “postcss-url”:{},<br>          “autoprefixer”: {}<br>        }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> - 安装`postcss-import`和`postcss-url`插件  </span><br><span class="line">*`$ npm install postcss-import`和`$ npm install postcss-url`</span><br><span class="line">*`postcss-import`相关配置[*点击这里*](http://github.com/postcss/postcss-import &quot;postcss-import的github仓库&quot;)。主要功有是解决`@import`引入路径问题。使用这个插件，可以让你很轻易的使用本地文件、`node_modules`或者`web_modules`的文件。这个插件配合`postcss-url`让你引入文件变得更轻松。  </span><br><span class="line">    *`postcss-url`相关配置可以[*点击这里*](https://github.com/postcss/postcss-url &quot;postcss-url的github仓库&quot;)。该插件主要用来处理文件，比如图片文件、字体文件等引用路径的处理。在Vue项目中，`vue-loader`已具有类似的功能，只需要配置中将`vue-loader`配置进去。  </span><br><span class="line">    *`autoprefixer`插件是用来自动处理浏览器前缀的一个插件。如果你配置了`postcss-cssnext`，其中就已具备了`autoprefixer`的功能。在配置的时候，未显示的配置相关参数的话，表示使用的是[`Browserslist`](https://github.com/ai/browserslist &quot;Browserslist的github仓库地址&quot;)指定的列表参数，你也可以像这样来指定`last 2 versions` 或者 `&gt; 5%`。如此一来，你在编码时不再需要考虑任何浏览器前缀的问题，可以专心撸码。这也是PostCSS最常用的一个插件之一。  </span><br><span class="line">    </span><br><span class="line">###其他插件  </span><br><span class="line">我们要完成vw的布局兼容方案，或者说让我们能更专心的撸码，还需要配置下面的几个PostCSS插件：</span><br><span class="line"></span><br><span class="line">*[postcss-aspect-ratio-mini](http://github.com/yisibl/postcss-aspect-ratio-mini)</span><br><span class="line">*[postcss-px-to-viewport](http://github.com/evrone/postcss-px-to-viewport)</span><br><span class="line">*[postcss-write-svg](http://github.com/jonathantneal/postcss-write-svg)</span><br><span class="line">*[postcss-cssnext](http://github.com/MoOx/postcss-cssnext)</span><br><span class="line">*[cssnano](http://github.com/ben-eb/cssnano)</span><br><span class="line">*[postcss-viewport-units](http://github.com/springuper/postcss-viewport-units)  </span><br><span class="line"></span><br><span class="line">要使用  </span><br><span class="line">安装成功后，在项目根目录下的`package.json`文件中，可以看到新安装的依赖包：</span><br></pre></td></tr></table></figure></p><p>“dependencies”: {<br>    “cssnano”: “^3.10.0”,<br>    “postcss-aspect-ratio-mini”: “^0.0.2”,<br>    “postcss-cssnext”: “^3.1.0”,<br>    “postcss-import”: “^11.1.0”,<br>    “postcss-px-to-viewport”: “^0.0.3”,<br>    “postcss-url”: “^7.3.2”,<br>    “postcss-viewport-units”: “^0.1.4”,<br>    “postcss-write-svg”: “^3.0.1”,<br>    “vue”: “^2.5.16”,<br>    “vue-router”: “^3.0.1”,<br>    “vuex”: “^3.0.1”<br>  },<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来在`.postcssrc.js`文件对新安装的`PostCSS`插件进行配置：</span><br></pre></td></tr></table></figure></p><p>module.exports = {<br>  plugins: {<br>    “postcss-import”: {},<br>    “postcss-url”: {},<br>    //“autoprefixer”: {},<br>    “postcss-aspect-ratio-mini”: {},<br>    “postcss-write-svg”: {<br>      utf8: false<br>    },<br>    “postcss-cssnext”: {},<br>    “postcss-px-to-viewport”: {<br>      viewportWidth: 750, //视窗的宽度，对应的是我们设计稿的宽度，一般是750<br>      viewportHeight: 1334, //视窗的高度，根据750设备的宽度来置顶，一般指定1334，也可以不配置<br>      unitPrecision: 3, //指定’px’转换为视窗单位值的小数位数（很多时候无法整除）<br>      viewportUnit: ‘vw’, //指定需要转换成的视窗单位，建议使用vw<br>      selectorBlackList: [‘.ignore’, ‘.hairlines’, ‘.g-vw-no’], //指定不转行为视窗单位的类，可以自定义，可以无限添加，建议定义一至两个通用的类名<br>      minPixeValue: 1, //小于或等于’1px’不转换为视窗单位，你也可以设置为你想要的值<br>      mediaQuery: false //允许在媒体查询中转换’px’<br>    },<br>    “postcss-viewport-units”: {},<br>    “cssnano”: {<br>      preset: “advanced”,<br>      autoprefixer: false,<br>      “postcss-zindex”: false<br>    }<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 特别声明：由于`cssnext`和`cssnano`都具有`autoprefixer`,事实上只需要一个，所以把默认的`autoprefixer`删除掉，然后把`cssnano`中的`autoprefixer`设置为`false`。对于其他的插件使用，稍后会简单的介绍。</span><br><span class="line"></span><br><span class="line">由于配置文件修改了，所以重新跑一下`npm run dev`。项目就可以正常看到了。接下来简单的介绍一下后面安装的几个插件的作用。</span><br><span class="line">##### postcss-cssnext</span><br><span class="line"></span><br><span class="line">`postcss-cssnext`其实就是`cssnext`。该插件可以让我们使用CSS未来的特性，其会对这些特性做相关的兼容性处理。其包含的特性主要有：  </span><br><span class="line">有关于cssnext的每个特性的操作文档，可以[点击这里](http://cssnano.co/guides/getting-started/)浏览。</span><br><span class="line">##### cssnano</span><br><span class="line"></span><br><span class="line">`cssnano`主要用来压缩和清理`CSS`代码。在`Webpack`中，`cssnano`和`css-loader`捆绑在一起，所以不需要自己加载它。不过你也可以使用`postcss-loader`显式的使用`cssnano`。有关于`cssnano`的详细文档，可以点击这里获取。</span><br><span class="line"></span><br><span class="line">在`cssnano`的配置中，使用了`preset: &quot;advanced&quot;`，所以我们需要另外安装：</span><br></pre></td></tr></table></figure></p><p>npm i cssnano-preset-advanced –save-dev<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`cssnano`集成了一些其他的`PostCSS`插件，如果你想禁用`cssnano`中的某个插件的时候，可以像下面这样操作：</span><br></pre></td></tr></table></figure></p><p>“cssnano”: {<br>    autoprefixer: false,<br>    “postcss-zindex”: false<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上面的代码把`autoprefixer`和`postcss-zindex`禁掉了。前者是有重复调用，后者是一个讨厌的东东。只要启用了这个插件，`z-index`的值就会重置为1。这是一个天坑，***千万记得将`postcss-zindex`设置为`false`***。</span><br><span class="line">postcss-px-to-viewport</span><br><span class="line"></span><br><span class="line">postcss-px-to-viewport插件主要用来把px单位转换为vw、vh、vmin或者vmax这样的视窗单位，也是vw适配方案的核心插件之一。</span><br><span class="line"></span><br><span class="line">在配置中需要配置相关的几个关键参数：</span><br></pre></td></tr></table></figure></p><p>“postcss-px-to-viewport”: {<br>    viewportWidth: 750,      // 视窗的宽度，对应的是我们设计稿的宽度，一般是750<br>    viewportHeight: 1334,    // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置<br>    unitPrecision: 3,        // 指定<code>px</code>转换为视窗单位值的小数位数（很多时候无法整除）<br>    viewportUnit: ‘vw’,      // 指定需要转换成的视窗单位，建议使用vw<br>    selectorBlackList: [‘.ignore’, ‘.hairlines’],  // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名<br>    minPixelValue: 1,       // 小于或等于<code>1px</code>不转换为视窗单位，你也可以设置为你想要的值<br>    mediaQuery: false       // 允许在媒体查询中转换<code>px</code><br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前出视觉设计稿，我们都是使用750px宽度的，那么100vw = 750px，即1vw = 7.5px。那么我们可以根据设计图上的px值直接转换成对应的vw值。在实际撸码过程，不需要进行任何的计算，直接在代码中写px，比如：</span><br></pre></td></tr></table></figure></p><p>.test {<br>    border: .5px solid black;<br>    border-bottom-width: 4px;<br>    font-size: 14px;<br>    line-height: 20px;<br>    position: relative;<br>}<br>[w-188-246] {<br>    width: 188px;<br>}</p><p>编译出来的CSS：</p><p>.test {<br>    border: .5px solid #000;<br>    border-bottom-width: .533vw;<br>    font-size: 1.867vw;<br>    line-height: 2.667vw;<br>    position: relative;<br>}<br>[w-188-246] {<br>    width: 25.067vw;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在不想要把`px`转换为`vw`的时候，首先在对应的元素（`html`）中添加配置中指定的类名`.ignore`或`.hairlines`(`.hairlines`一般用于设置`border-width:0.5px`的元素中)：</span><br></pre></td></tr></table></figure></p><p><div class="box ignore"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写CSS的时候：</span><br></pre></td></tr></table></figure></p><p>.ignore {<br>    margin: 10px;<br>    background-color: red;<br>}<br>.box {<br>    width: 180px;<br>    height: 300px;<br>}<br>.hairlines {<br>    border-bottom: 0.5px solid red;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译出来的CSS:</span><br></pre></td></tr></table></figure></p><p>.box {<br>    width: 24vw;<br>    height: 40vw;<br>}<br>.ignore {<br>    margin: 10px; /<em>.box元素中带有.ignore类名，在这个类名写的<code>px</code>不会被转换</em>/<br>    background-color: red;<br>}<br>.hairlines {<br>    border-bottom: 0.5px solid red;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">上面解决了`px`到`vw`的转换计算。那么在哪些地方可以使用`vw`来适配我们的页面。根据相关的测试：</span><br><span class="line"></span><br><span class="line">* 容器适配，可以使用vw</span><br><span class="line">* 文本的适配，可以使用vw</span><br><span class="line">* 大于1px的边框、圆角、阴影都可以使用vw</span><br><span class="line">* 内距和外距，可以使用vw</span><br><span class="line"></span><br><span class="line">##### postcss-aspect-ratio-mini</span><br><span class="line"></span><br><span class="line">[`postcss-aspect-ratio-mini`](http://github.com/yisibl/postcss-aspect-ratio-mini)主要用来处理元素容器宽高比。在实际使用的时候，具有一个默认的结构</span><br></pre></td></tr></table></figure></p><p><div aspectratio><br>    <div aspectratio-content></div><br></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在实际使用的时候，你可以把自定义属性`aspectratio`和`aspectratio-content`换成相应的类名，比如：</span><br></pre></td></tr></table></figure></p><p><div class="aspectratio"><br>    <div class="aspectratio-content"></div><br></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我个人比较喜欢用__自定义属性__，它和类名所起的作用是同等的。结构定义之后，需要在你的样式文件中添加一个**统一的宽度比默认属性**：</span><br></pre></td></tr></table></figure></p><p>[aspectratio] {<br>    position: relative;<br>}<br>[aspectratio]::before {<br>    content: ‘’;<br>    display: block;<br>    width: 1px;<br>    margin-left: -1px;<br>    height: 0;<br>}<br>/<em>aspectratio-content存放内容，自由填满，利用伪元素::before和::after来撑开容器</em>/<br>[aspectratio-content] {<br>    position: absolute;<br>    top: 0;<br>    left: 0;<br>    right: 0;<br>    bottom: 0;<br>    width: 100%;<br>    height: 100%;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果我们想要做一个`188:246`（`188`是容器宽度，`246`是容器高度）这样的比例容器，只需要这样使用：</span><br></pre></td></tr></table></figure></p><p>[w-188-246] {<br>    aspect-ratio: ‘188:246’;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一点需要特别注意：`aspect-ratio`属性不能和其他属性写在一起，否则编译出来的属性只会留下`aspect-ratio`的值，比如：</span><br></pre></td></tr></table></figure></p><p><div aspectratio w-188-246 class="color"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译前的CSS如下：</span><br></pre></td></tr></table></figure></p><p>[w-188-246] {<br>    width: 188px;<br>    background-color: red;<br>    aspect-ratio: ‘188:246’;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译之后：</span><br></pre></td></tr></table></figure></p><p>[w-188-246]:before {<br>    padding-top: 130.85106382978725%;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要是因为在插件中做了相应的处理，不在每次调用`aspect-ratio`时，生成前面指定的默认样式代码，这样代码没那么冗余。所以在使用的时候，需要把`width`和`background-color`分开来写：</span><br></pre></td></tr></table></figure></p><p>[w-188-246] {<br>    width: 188px;<br>    background-color: red;<br>}<br>[w-188-246] {<br>    aspect-ratio: ‘188:246’;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个时候，编译出来的CSS就正常了：</span><br></pre></td></tr></table></figure></p><p>[w-188-246] {<br>    width: 25.067vw;/<em>撑开宽度</em>/<br>    background-color: red;<br>}<br>[w-188-246]:before {<br>    padding-top: 130.85106382978725%;/<em>撑开高度</em>/<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">有关于宽高比相关的详细介绍，如果大家感兴趣的话，可以阅读下面相关的文章：</span><br><span class="line"></span><br><span class="line">* [CSS实现长宽比的几种方案](http://www.w3cplus.com/css/aspect-ratio.html)</span><br><span class="line">* [容器长宽比](http://www.w3cplus.com/css/aspect-ratio-boxes.html)</span><br><span class="line">* [Web中如何实现纵横比](http://www.w3cplus.com/css/experiments-in-fixed-aspect-ratios.html)</span><br><span class="line">* [实现精准的流体排版原理](http://www.w3cplus.com/css/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations.html)</span><br><span class="line"></span><br><span class="line">&gt; 目前采用`PostCSS`插件只是一个过渡阶段，在将来我们可以直接在CSS中使用`aspect-ratio`属性来实现长宽比。</span><br><span class="line">##### postcss-write-svg</span><br><span class="line"></span><br><span class="line">[`postcss-write-svg`](http://github.com/jonathantneal/postcss-write-svg)插件主要用来处理移动端`1px`的解决方案。该插件主要使用的是`border-image`和`background`来做`1px`的相关处理。比如：</span><br></pre></td></tr></table></figure></p><p>@svg 1px-border {<br>    height: 2px;<br>    @rect {<br>        fill: var(–color, black);<br>        width: 100%;<br>        height: 50%;<br>    }<br>}<br>.example {<br>    border: 1px solid transparent;<br>    border-image: svg(1px-border param(–color #00b1ff)) 2 2 stretch;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译出来的CSS:</span><br></pre></td></tr></table></figure></p><p>.example {<br>    border: 1px solid transparent;<br>    border-image: url(“data:image/svg+xml;charset=utf-8,%3Csvg xmlns=’<a href="http://www.w3.org/2000/svg&#39;" target="_blank" rel="noopener">http://www.w3.org/2000/svg&#39;</a> height=’2px’%3E%3Crect fill=’%2300b1ff’ width=’100%25’ height=’50%25’/%3E%3C/svg%3E”) 2 2 stretch;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上面演示的是使用`border-image`方式，除此之外还可以使用`background-image`来实现。比如：</span><br></pre></td></tr></table></figure></p><p>@svg square {<br>    @rect {<br>        fill: var(–color, black);<br>        width: 100%;<br>        height: 100%;<br>    }<br>}</p><p>#example {<br>    background: white svg(square param(–color #00b1ff));<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译出来就是：</span><br></pre></td></tr></table></figure></p><p>#example {<br>    background: white url(“data:image/svg+xml;charset=utf-8,%3Csvg xmlns=’<a href="http://www.w3.org/2000/svg&#39;%3E%3Crect" target="_blank" rel="noopener">http://www.w3.org/2000/svg&#39;%3E%3Crect</a> fill=’%2300b1ff’ width=’100%25’ height=’100%25’/%3E%3C/svg%3E”);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">解决`1px`的方案除了这个插件之外，还有其他的方法。可以阅读前期整理的《[再谈Retina下`1px`的解决方案](http://www.w3cplus.com/css/fix-1px-for-retina.html)》一文。</span><br><span class="line"></span><br><span class="line">&gt; **特别声明**：由于有一些低端机对`border-image`支持度不够友好，个人建议你使用`background-image`的这个方案。</span><br><span class="line">##### CSS Modules</span><br><span class="line"></span><br><span class="line">Vue中的`vue-loader`已经集成了[CSS Modules](http://github.com/css-modules/css-modules)的功能，个人建议在项目中开始使用CSS Modules。特别是在Vue和React的项目中，CSS Modules具有很强的优势和灵活性。建议看看CSS In JS相关的资料。在Vue中，使用CSS Modules的相关文档可以阅读Vue官方提供的文档[《CSS Modules》](http://vue-loader.vuejs.org/en/features/css-modules.html)。</span><br><span class="line">##### postcss-viewport-units</span><br><span class="line"></span><br><span class="line">[`postcss-viewport-units`](http://github.com/springuper/postcss-viewport-units)插件主要是给CSS的属性添加`content`的属性，配合[`viewport-units-buggyfill`](http://github.com/rodneyrehm/viewport-units-buggyfill)库给`vw`、`vh`、`vmin`和`vmax`做适配的操作。</span><br><span class="line"></span><br><span class="line">这是实现`vw`布局必不可少的一个插件，因为少了这个插件，这将是一件痛苦的事情。后面你就清楚。</span><br><span class="line"></span><br><span class="line">到此为止，有关于所需要的PostCSS已配置完。并且简单的介绍了各个插件的作用，至于详细的文档和使用，可以参阅对应插件的官方文档。</span><br><span class="line">### vw兼容方案</span><br><span class="line">使用`viewport`的`polyfill`：`Viewport Units Buggyfill`。使用`viewport-units-buggyfill`主要分以下几步走：</span><br><span class="line">##### 引入JavaScript文件</span><br><span class="line"></span><br><span class="line">`viewport-units-buggyfill`主要有两个JavaScript文件：`viewport-units-buggyfill.js`和`viewport-units-buggyfill.hacks.js`。你只需要在你的HTML文件中引入这两个文件。比如在Vue项目中的`index.html`引入它们：</span><br></pre></td></tr></table></figure></p><p><script src="//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js"></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你也可以使用其他的在线CDN地址，也可将这两个文件合并压缩成一个`.js`文件。这主要看你自己的兴趣了。</span><br><span class="line"></span><br><span class="line">第二步，在HTML文件中调用`viewport-units-buggyfill`，比如：</span><br></pre></td></tr></table></figure></p><p><script><br>    window.onload = function () {<br>        window.viewportUnitsBuggyfill.init({<br>            hacks: window.viewportUnitsBuggyfillHacks<br>        });<br>    }<br></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">为了你Demo的时候能获取对应机型相关的参数，我在示例中添加了一段额外的代码，估计会让你有点烦：</span><br><span class="line">```javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">     window.viewportUnitsBuggyfill.init(&#123;</span><br><span class="line">     hacks: window.viewportUnitsBuggyfillHacks</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     var winDPI = window.devicePixelRatio;</span><br><span class="line">     var uAgent = window.navigator.userAgent;</span><br><span class="line">     var screenHeight = window.screen.height;</span><br><span class="line">     var screenWidth = window.screen.width;</span><br><span class="line">     var winWidth = window.innerWidth;</span><br><span class="line">     var winHeight = window.innerHeight;</span><br><span class="line"></span><br><span class="line">     alert(</span><br><span class="line">         &quot;Windows DPI:&quot; + winDPI +</span><br><span class="line">         &quot;;\ruAgent:&quot; + uAgent +</span><br><span class="line">         &quot;;\rScreen Width:&quot; + screenWidth +</span><br><span class="line">         &quot;;\rScreen Height:&quot; + screenHeight +</span><br><span class="line">         &quot;;\rWindow Width:&quot; + winWidth +</span><br><span class="line">         &quot;;\rWindow Height:&quot; + winHeight</span><br><span class="line">     )</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>具体的使用。在你的CSS中，只要使用到了<code>viewport</code>的单位（<code>vw</code>、<code>vh</code>、<code>vmin</code>或<code>vmax</code> ）地方，需要在样式中添加<code>content</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.my-viewport-units-using-thingie &#123;</span><br><span class="line">    width: 50vmin;</span><br><span class="line">    height: 50vmax;</span><br><span class="line">    top: calc(50vh - 100px);</span><br><span class="line">    left: calc(50vw - 100px);</span><br><span class="line"></span><br><span class="line">    /* hack to engage viewport-units-buggyfill */</span><br><span class="line">    content: &apos;viewport-units-buggyfill; width: 50vmin; height: 50vmax; top: calc(50vh - 100px); left: calc(50vw - 100px);&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这可能会令你感到恶心，而且我们不可能每次写vw都去人肉的计算。特别是在我们的这个场景中，咱们使用了<code>postcss-px-to-viewport</code>这个插件来转换<code>vw</code>，更无法让我们人肉的去添加<code>content</code>内容。</p><p>这个时候就需要前面提到的<code>postcss-viewport-units</code>插件。这个插件将让你无需关注<code>content</code>的内容，插件会自动帮你处理。  </p><p><a href="http://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener"><strong>Viewport Units Buggyfill</strong></a>还提供了其他的功能。详细的这里不阐述了。但是<code>content</code>也会引起一定的副作用。比如<code>img</code>和伪元素<code>::before</code>(<code>:before</code>)或<code>::after</code>（<code>:after</code>）。在<code>img</code>中<code>content</code>会引起部分浏览器下，图片不会显示。这个时候需要全局添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">    content: normal !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而对于<code>::after</code>之类的，就算是里面使用了<code>vw</code>单位，Viewport Units Buggyfill对其并不会起作用。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 编译前</span><br><span class="line">.after &#123;</span><br><span class="line">    content: &apos;after content&apos;;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编译后</span><br><span class="line">.after[data-v-469af010] &#123;</span><br><span class="line">    content: &quot;after content&quot;;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 13.333vw;</span><br><span class="line">    height: 2.667vw;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候我们需要通过添加<strong>额外的标签</strong>来替代伪元素（这个情景我没有测试到，后面自己亲测一下）。</p><p>到了这个时候，你就不需要再担心兼容问题了。<br>整个示例的源码，可以点击<a href="http://www.w3cplus.com/sites/default/files/blogs/2018/1801/vw-layout.zip" title="示例源码" target="_blank" rel="noopener">这里下载</a>。</p><blockquote><p>如果你下载了示例源码，先要确认你的系统环境能跑Vue的项目，然后下载下来之后，解压缩，接着运行<code>npm i</code>，再运行<code>npm run dev</code>，你就可以看到效果了。</p></blockquote><h2 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h2><hr><p>在开发完项目之后，就应该打包上线了。 vue-cli 也提供了打包的命令，在项目根目录下执行：<br><code>npm run build</code><br>执行完之后，可以看到在项目根目录下多出了一个 dist 目录，该目录下就是打包好的所有静态资源，直接部署到静态资源服务器就好了。<br>实际上，在部署的时候要注意，假设静态服务器的域名是 <code>http://static.baidu.com</code> ，那么对应到访问 <code>&lt;项目根目录&gt;/dist/index.html</code> 的 URL 一定要是 <code>http://static.baidu.com/index.html</code> ，其他的静态资源以此类推。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本地安装vue-cli&quot;&gt;&lt;a href=&quot;#本地安装vue-cli&quot; class=&quot;headerlink&quot; title=&quot;本地安装vue-cli&quot;&gt;&lt;/a&gt;本地安装vue-cli&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更新npm到最新版本  &lt;blockquote&gt;
&lt;p&gt;命令行运行:&lt;br&gt;&lt;code&gt;npm install -g npm&lt;/code&gt;&lt;br&gt;npm就自动为我们更新到最新版本  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;淘宝npm镜像使用方法&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;&lt;code&gt;cnpm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;&lt;code&gt;yarn config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;br&gt;配置后可通过下面方式来验证是否成功 ：&lt;br&gt;  &lt;code&gt;npm config get registry&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;使用 npm 全局安装 vue-cli ：&lt;br&gt;&lt;code&gt;npm i -g @vue/cli@3.0.0-beta.6&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vue" scheme="http://blog.xuziyu.cn/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.xuziyu.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue解决跨域问题</title>
    <link href="http://blog.xuziyu.cn/vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html"/>
    <id>http://blog.xuziyu.cn/vue解决跨域问题.html</id>
    <published>2018-04-03T06:05:00.000Z</published>
    <updated>2019-03-16T07:34:33.690Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如果把所有的接口，统一规范为一个入口，在一定程度上会解决冲突  </p><pre><code>proxyTable: {      &apos;/api/**&apos;: { //使用&quot;/api&quot;来代替&quot;源地址&quot;        target: &apos;http://www.qiangchebao.cn/ver100&apos;, //源地址        changeOrigin: true, //改变源        pathRewrite: {          &apos;^/api&apos;: &apos;/&apos; //路径重写        }      }    },</code></pre><a id="more"></a></li><li><p>上面这个代码，就是把咱们虚拟的这个api接口，去掉，此时真正去后端请求的时候，不会加上api这个前缀了，那么这样我们前台http请求的时候，还必须加上api前缀才能匹配到这个代理,代码如下： </p><pre><code>logout(){  axios.post(&apos;/api/users/logout&apos;).then(result=&gt;    {      let res = result.data;      this.nickName = &apos;&apos;;      console.log(res);      })  },</code></pre></li><li><p>我们可以利用<code>axios的baseUrl</code>直接默认值是 api，这样我们每次访问的时候，<strong>自动补上这个api前缀</strong>，就不需要我们自己手工在每个接口上面写这个前缀了<br><strong>在入口文件里面配置如下：</strong></p><pre><code>import Axios from &apos;axios&apos;import VueAxios from &apos;vue-axios&apos;Vue.use(VueAxios, Axios)Axios.defaults.baseURL = &apos;api&apos;//如果这配置 &apos;api/&apos; 会默认读取本地的域  </code></pre><blockquote><p>vue-axios的用法  </p></blockquote><pre><code> Vue.axios.get(api).then((response) =&gt; {  console.log(response.data)})this.axios.get(api).then((response) =&gt; {  console.log(response.data)})this.$http.post(api,{params}).then((response) =&gt; {  console.log(response.data)})</code></pre><blockquote><p>在使用post方式的时候传递参数有两种方式，一种是<strong>普通的formed方式</strong>，一种是<strong>json方式</strong>，如果后台接受的是普通方式，那么使用上述方式即可。  </p></blockquote></li></ul><p><strong>普通的formed方式</strong></p><p>默认情况下，axios串联js对象为 JSON 格式。使用 <code>application/x-www-form-urlencoded</code> 格式化<br><strong>浏览器 Browser</strong><br>在浏览器中你可以如下使用 <code>URLSearchParams API</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var params = new URLSearchParams();</span><br><span class="line">params.append(&apos;param1&apos;,&apos;value1&apos;);</span><br><span class="line">params.append(&apos;param2&apos;,&apos;value2&apos;);</span><br><span class="line">axios.post(&apos;/foo&apos;,params);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意： URLSearchParams 不支持所有的浏览器  </p></blockquote><p>其他方法：你可以使用 qs 库来格式化数据。</p><pre><code>var qs = require(&apos;qs&apos;);axios.post(&apos;/foo&apos;, qs.stringify({&apos;bar&apos;:123}));  </code></pre><p><strong>json方式</strong></p><pre><code>data: {&apos;bar&apos;:123}  </code></pre><ul><li><p>上面这样配置的话，不会区分生产和开发环境，在config 文件夹里面新建一个 <code>api.config.js</code> 配置文件，用来分别设置不同环境。  </p><pre><code>const isPro = Object.is(process.env.NODE_ENV, &apos;production&apos;)module.exports = {  baseUrl: isPro ? &apos;http://www.qiangchebao.cn/ver100&apos; : &apos;api/&apos;}  </code></pre><p>然后在 <code>main.js</code> 里面引入,这样可以保证动态的匹配生产和开发的定义前缀  </p><pre><code>  //引入api.config.jsimport apiConfig from &apos;../config/api.config&apos;import Axios from &apos;axios&apos;import VueAxios from &apos;vue-axios&apos;Vue.use(VueAxios, Axios)//根据环境设置axios的baseurlAxios.defaults.baseURL = apiConfig.baseUrl    </code></pre><p>经过上面配置后，在dom里面可以这样轻松的访问,也不需要在任何组件里面引入axios模块了。</p></li><li><p>在dom里面请求api的姿势  </p><pre><code>this.$http      .post(        &quot;/car/getCarDetail&quot;,        qs.stringify({          car_id: carId        })      )      .then(res =&gt; {          console.log(res);      });</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果把所有的接口，统一规范为一个入口，在一定程度上会解决冲突  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxyTable: {
      &amp;apos;/api/**&amp;apos;: { //使用&amp;quot;/api&amp;quot;来代替&amp;quot;源地址&amp;quot;
        target: &amp;apos;http://www.qiangchebao.cn/ver100&amp;apos;, //源地址
        changeOrigin: true, //改变源
        pathRewrite: {
          &amp;apos;^/api&amp;apos;: &amp;apos;/&amp;apos; //路径重写
        }
      }
    },
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="vue" scheme="http://blog.xuziyu.cn/categories/vue/"/>
    
    
      <category term="vue,环境配置" scheme="http://blog.xuziyu.cn/tags/vue-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>javascript工具函数</title>
    <link href="http://blog.xuziyu.cn/javascript%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.html"/>
    <id>http://blog.xuziyu.cn/javascript工具函数.html</id>
    <published>2018-03-05T08:58:00.000Z</published>
    <updated>2019-03-16T07:34:33.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端获取url参数"><a href="#前端获取url参数" class="headerlink" title="前端获取url参数"></a>前端获取url参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getQueryString(name) &#123;</span><br><span class="line">        var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &apos;i&apos;); // 匹配目标参数</span><br><span class="line">        var result = window.location.search.substr(1).match(reg); // 对querystring匹配目标参数</span><br><span class="line">        if (result != null) &#123;</span><br><span class="line">            return decodeURIComponent(result[2]);//对 encodeURIComponent() 函数编码的 URI 进行解码。</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用函数获取url参数</p><pre><code>var user = parseInt(getQueryString(&apos;user&apos;),10)||null;//获取user的参数并转换成10进制数字</code></pre><h3 id="jquery的-ajax-设置"><a href="#jquery的-ajax-设置" class="headerlink" title="jquery的$.ajax()设置"></a>jquery的$.ajax()设置</h3><pre><code>$.ajaxSetup({    beforeSend:function(){        //loading带文字        $.showLoading();    },    error: function (err) {        console.log(&quot;发生错误：&quot;, err)        $.hideLoading();    },    dataFilter:function (data,type) {        $.hideLoading();        return data;    }});</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端获取url参数&quot;&gt;&lt;a href=&quot;#前端获取url参数&quot; class=&quot;headerlink&quot; title=&quot;前端获取url参数&quot;&gt;&lt;/a&gt;前端获取url参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="项目实战" scheme="http://blog.xuziyu.cn/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>极验证-geetest-前端配置</title>
    <link href="http://blog.xuziyu.cn/%E6%9E%81%E9%AA%8C%E8%AF%81-geetest-%E5%89%8D%E7%AB%AF%E9%85%8D%E7%BD%AE.html"/>
    <id>http://blog.xuziyu.cn/极验证-geetest-前端配置.html</id>
    <published>2018-03-02T08:57:00.000Z</published>
    <updated>2019-03-16T07:34:33.696Z</updated>
    
    <content type="html"><![CDATA[<p>在公司项目《玩客小兵》中，登陆或者注册的场景中需要进行<code>人机验证</code>，使用了第三方插件<a href="http://www.geetest.com/" target="_blank" rel="noopener">极验证-geetest</a>。</p><blockquote><p>插件效果 <img src="http://image.xuziyu.cn/wx_20180302160419.png" alt="极验证插件效果" style="width:250px;"> </p></blockquote><hr><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>引入初始化函数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;gt.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用初始化函数进行初始化</p><pre><code>$.ajax({  // 获取id，challenge，success（是否启用failback）  url: &quot;/user/startCaptchaServlet?t=&quot; + (new Date()).getTime(), // 后台接口，加随机数防止缓存  type: &quot;get&quot;,  dataType: &quot;json&quot;,  success: function (data) {      console.log(data);      // 使用initGeetest接口      // 参数1：配置参数      initGeetest({          gt: data.gt,          challenge: data.challenge,          new_captcha: data.new_captcha,          product: &quot;embed&quot;, // 产品形式，包括：float，embed，popup。注意只对PC版验证码有效          offline: !data.success // 表示用户后台检测极验服务器是否宕机，一般不需要关注      },       // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件      handlerEmbed);  }});</code></pre></li><li><p>初始化成功后，使用回调函数  </p><pre><code>var handlerEmbed = function (captchaObj) {var this_data = {    mobile: null,    type: &apos;signup&apos;};//点击下一步$(&quot;.js-next-login&quot;).click(function (e) {    $(&apos;.geetest_btn&apos;).trigger(&apos;click&apos;);});// 监听验证成功事件captchaObj.onSuccess(function () {    //如果验证成功，就执行相关代码});// 将验证码加到id为captcha的元素里，同时会有三个input的值：geetest_challenge, geetest_validate, geetest_seccodecaptchaObj.appendTo(&quot;#embed-captcha&quot;);captchaObj.onReady(function () {});};</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司项目《玩客小兵》中，登陆或者注册的场景中需要进行&lt;code&gt;人机验证&lt;/code&gt;，使用了第三方插件&lt;a href=&quot;http://www.geetest.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极验证-geetest&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插件效果 &lt;img src=&quot;http://image.xuziyu.cn/wx_20180302160419.png&quot; alt=&quot;极验证插件效果&quot; style=&quot;width:250px;&quot;&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="插件" scheme="http://blog.xuziyu.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="验证" scheme="http://blog.xuziyu.cn/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Ajax原理</title>
    <link href="http://blog.xuziyu.cn/Ajax%E5%8E%9F%E7%90%86.html"/>
    <id>http://blog.xuziyu.cn/Ajax原理.html</id>
    <published>2018-02-13T08:55:00.000Z</published>
    <updated>2019-03-16T07:34:33.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="前端相关的技术点"><a href="#前端相关的技术点" class="headerlink" title="前端相关的技术点"></a>前端相关的技术点</h2><ul><li>html 主要用来实现页面的排版布局</li><li>css 主要用来实现页面的样式美化</li><li>javaScript 主要用来实现前端功能特效</li></ul><blockquote><p>采用上面的这些技术开发的页面和前端特效脚本需要放到服务器才能够对外提供服务，才能够让互联网上的网友看到。<br><a id="more"></a></p></blockquote><h2 id="客户端与服务器"><a href="#客户端与服务器" class="headerlink" title="客户端与服务器"></a>客户端与服务器</h2><blockquote><p>本质上都是计算机，只不过样子不同，配置不同，应用场景不同（安装的应用软件不同） </p></blockquote><ul><li>客户端主要用于普通上网用户</li><li>服务器主要给上网用户提供后台服务</li></ul><h2 id="网络相关概念"><a href="#网络相关概念" class="headerlink" title="网络相关概念"></a>网络相关概念</h2><ul><li>IP地址（唯一的确定互联网上的一台计算机）</li><li>域名 IP地址的别名，方便记忆</li><li>DNS 用于维护IP地址与域名的关系</li><li>端口 用来确定计算机上的网络应用程序</li></ul><h2 id="通信协议理解"><a href="#通信协议理解" class="headerlink" title="通信协议理解"></a>通信协议理解</h2><blockquote><p>通信双方约定的规则</p></blockquote><ul><li>http/https 超为本传输协议</li><li>ftp 文件传输协议</li><li>smpt/pop3 邮件收发协议</li><li>……</li></ul><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><blockquote><p>网站由一系列页面组成（页面由js、css、图片、html标签。。。所有的这些文件都被称为资源）</p></blockquote><h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><blockquote><p>就是提前写好的html页面（包括图片、媒体文件。。。静态资源文件），并且部署到服务器上</p></blockquote><ul><li>静态网站主要存在的问题：<ul><li>随着网站规模的增大可维护性逐渐降低</li><li>没有交互性</li></ul></li></ul><h3 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h3><blockquote><p>动态指的是html页面是动态生成的，这里动态生成的不一定是一个完整的页面，有可能仅仅是页面的一部分，或者仅仅是数据(普通字符串、json、xml)</p></blockquote><ul><li><p>实现动态网站的技术：</p><ul><li>php</li><li>java（jsp）</li><li>.net</li><li>Node.js</li><li>python</li><li><p>……</p><h3 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h3><p>get       |     用来获取数据<br>post      |     用来添加数据<br>put       |     用来修改数据<br>delete    |     用来删除数据</p></li></ul></li></ul><blockquote><p>http 协议的常用请求方式: <strong>增删改查</strong></p></blockquote><h2 id="PHP基础语法"><a href="#PHP基础语法" class="headerlink" title="PHP基础语法"></a>PHP基础语法</h2><pre><code>&lt;?php PHP的所有语法都写在这个地方 ?&gt;</code></pre><ul><li>PHP文件文件格式是 <code>xxx.php</code>;</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量以$开头 字母/数字/下划线 不能以数字开头，大小写敏感。</p></blockquote><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><blockquote><p>PHP中字符串拼接用” <strong>.</strong> “;</p></blockquote><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><blockquote><p>PHP中的单引号把包含在其中的变量当作为普通的字符串来处理;</p></blockquote><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><blockquote><p>PHP中的双引号把包含在其中的变量当作变量解析成变量值;</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p>与javaScript基本类似;</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>字符串</li><li>整型</li><li>浮点型</li><li>布尔型</li><li>数组</li><li>对象</li><li>NULL<blockquote><p>gettype: 是内置数据类型的判断</p></blockquote></li></ul><h3 id="输出内容"><a href="#输出内容" class="headerlink" title="输出内容"></a>输出内容</h3><ul><li><strong>echo:</strong> 输出简单数据类型, 如字符串, 数值;</li><li><strong>print_r():</strong> 输出复杂数据类型, 如数组;</li><li><strong>var_dump</strong> 输出详细信息, 如对象, 数组;</li></ul><h3 id="分之循环"><a href="#分之循环" class="headerlink" title="分之循环"></a>分之循环</h3><ul><li>if/switch</li><li>while</li><li>for<ul><li>count()内置函数, 计算数组的长度;</li></ul></li><li>foreach<ul><li>foreach($arr as $key =&gt; $value){ };</li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><strong>自定义函数</strong><ul><li>语法类似与JavaScript的自定义函数;</li></ul></li><li><strong>系统函数</strong><ul><li>直接调用, 不需要声明;</li><li><code>json_encode();</code> 将数组和对象转换为字符串的方法;<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3></li></ul></li><li><strong>$_GET</strong><ul><li>$_GET请求参数获取</li><li>$_GET是专门用来接数据用的一个全局数组;</li><li>form 默认请求方式就是get请求, get请求会把表单数据作为url的参数进行提交;</li></ul></li><li><p><strong>$_POST</strong></p><ul><li>$_POST请求参数获取</li><li><p>设置服务响应的文件类型:</p><ol><li>header(“Content-Type: text/plain; charset=utf-8”);</li><li>header(“Content-Type: text/html; charset=utf-8”);</li></ol></li><li><p>$_POST也是PHP内置好的专门用来接数据用的一个全局数组;</p></li></ul></li><li><p><strong>GET与POST请求方式的差异</strong></p></li></ul><ol><li>GET没有请求主体, 使用<code>xhr.send(null)</code>;</li><li>GET可以通过在请求URL上添加请求参数;</li><li>POST有请求主体, 可以通过;<code>xhr.send(name=itcast=&amp;age=10)</code>;</li><li>POST需要设置请求头;</li><li>GET效率更好(应用多);</li><li>GET大小限制约4K, POST则没有限制;</li><li>与 POST 相比, GET 个更简单也更快,并且在大部分情况下都能用。</li><li>然而，在以下情况中，使用 POST 请求：<ul><li>无法使用缓存文件。</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含位置字符的用户输入时，POST 比 GET 更稳定也更可靠。</li></ul></li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>HTML</p></blockquote><pre><code>&lt;div&gt;    &lt;form action=&quot;./page6-data.php&quot; method=&quot;post&quot;&gt;        考号：&lt;input type=&quot;text&quot; name=&quot;code&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;    &lt;/form&gt;&lt;/div&gt;</code></pre><blockquote><p>PHP 文件名:page6-data.php</p></blockquote><pre><code>&lt;?php     / 服务器端渲染页面    arr = array();    arr[&apos;123&apos;] = array(&quot;username&quot;=&gt;&quot;张三&quot;,&quot;chinese&quot;=&gt;&quot;130&quot;,&quot;math&quot;=&gt;&quot;149&quot;,&quot;english&quot;=&gt;&quot;146&quot;,&quot;summary&quot;=&gt;&quot;298&quot;);    arr[&apos;124&apos;] = array(&quot;username&quot;=&gt;&quot;李四&quot;,&quot;chinese&quot;=&gt;&quot;100&quot;,&quot;math&quot;=&gt;&quot;140&quot;,&quot;english&quot;=&gt;&quot;136&quot;,&quot;summary&quot;=&gt;&quot;298&quot;);    arr[&apos;125&apos;] = array(&quot;username&quot;=&gt;&quot;王五&quot;,&quot;chinese&quot;=&gt;&quot;90&quot;,&quot;math&quot;=&gt;&quot;139&quot;,&quot;english&quot;=&gt;&quot;126&quot;,&quot;summary&quot;=&gt;&quot;298&quot;);    arr[&apos;126&apos;] = array(&quot;username&quot;=&gt;&quot;赵六&quot;,&quot;chinese&quot;=&gt;&quot;30&quot;,&quot;math&quot;=&gt;&quot;50&quot;,&quot;english&quot;=&gt;&quot;80&quot;,&quot;summary&quot;=&gt;&quot;100&quot;);    code = $_POST[&apos;code&apos;];    f($code == &apos;admin&apos;){        foreach($arr as $value){            echo &quot;&lt;ul&gt;                &lt;li&gt;姓名：$value[username]&lt;/li&gt;                &lt;li&gt;语文：$value[chinese]&lt;/li&gt;                &lt;li&gt;数学：$value[math]&lt;/li&gt;                &lt;li&gt;英语：$value[english]&lt;/li&gt;                &lt;li&gt;综合：$value[summary]&lt;/li&gt;            &lt;/ul&gt;&quot;;       }    else{        $score = $arr[$code];        echo &quot;&lt;ul&gt;            &lt;li&gt;姓名：$score[username]&lt;/li&gt;            &lt;li&gt;语文：$score[chinese]&lt;/li&gt;            &lt;li&gt;数学：$score[math]&lt;/li&gt;            &lt;li&gt;英语：$score[english]&lt;/li&gt;            &lt;li&gt;综合：$score[summary]&lt;/li&gt;        &lt;/ul&gt;&quot;;    }?&gt;</code></pre><h3 id="后台接口"><a href="#后台接口" class="headerlink" title="后台接口"></a>后台接口</h3><ol><li>将数组和对象转换为字符串的方法 — json_encode();</li><li>将字符串转换为对象的方式 — json_decod();</li><li>接口说白了就是后台返回特定格式数据, 而不是一个完整的页面, 就是从后台到前台返回一些数据;</li></ol><h3 id="请求参数分析"><a href="#请求参数分析" class="headerlink" title="请求参数分析"></a>请求参数分析</h3><blockquote><p> <strong>open();</strong></p></blockquote><pre><code>xhr.open(&quot;get&quot;,&quot;nemo.php?username=&quot;+uname+&quot;&amp;password=&quot;+pwd,true);</code></pre><ul><li>调用open方法并不会真正发送请求, 而是启动一个请求以备发送.</li><li>它接受三个参数: <ul><li>参数一: 请求方式(get获取数据, post提交数据);</li><li>参数二: 请求地址;</li><li>参数三: 同步或者异步标识位, 默认是 true, true表示异步, false 表示同步;</li></ul></li><li><strong>注意：</strong> 如果是get请求， 那么请求参数必须在url中传递， 那么就用<code>encodeURI（）</code> 进行编码，防止乱码。</li></ul><blockquote><p><strong>send();</strong></p></blockquote><ul><li>如果要发送请求， 用send()方法。</li><li>要发送特定的请求，需要调用send（）方法。它接收一个参数，即要作为请求主体发送的数据。</li><li>get请求，则必须传入null。post请求传入字符串。</li><li>get请求是只有头部，没有主体的，而post请求有请求主体。</li><li><strong>注意：</strong>post请求参数通过send传递，不需要通过<code>encodeURI()</code>转码,但是必须需要设置请求参数.</li></ul><h3 id="创建-xhr-对象"><a href="#创建-xhr-对象" class="headerlink" title="创建 xhr  对象"></a>创建 xhr  对象</h3><pre><code>1. 标准: xhr = new XMLHttprequest();2. IE6: xhr = newActiveXObject(&apos;Microsoft.XMLHTTP&quot;);</code></pre><ul><li>xhr 对象有一个重要的属性, 就是 readyState 属性,表示”就绪状态”, 就是 <code>xhr.readyState</code>。</li><li><p>readyState 取值有5种值： 0、1、2、3、4</p><pre><code>0  -----  未初始化。1  -----  XMLHttpRequest对象正在加载。2  -----  xmlHttp对象加载完毕。3  -----  正在传输数据。4  -----  全部完成。</code></pre></li><li><p>只要 readyState改变后，就会触发一个事件 <code>onreadystatechange</code> 事件.</p><pre><code>xhr.onreadyStatechange = function(){};</code></pre></li><li><p>Ajax-但用senp方法发出HTTP请求之后,判断ceadyState得到的时候,就会有一个属性<code>xhr.status</code>表示的是请求的文件的状态码.</p><pre><code>1. 1**  -----   消息.2. 200  -----   代码请求成功.3. 3**  -----   重定向.4. 404  -----   请求错误.5. 500  -----   服务器错误.6. 6**  -----   其他.</code></pre></li></ul><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><blockquote><p>HTML</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    window.onload = function(){        var btn = document.getElementById(&apos;btn&apos;);        btn.onclick = function(){            var uname = document.getElementById(&apos;username&apos;).value;            var pw = document.getElementById(&apos;password&apos;).value;            // 1、创建XMLHttpRequest对象            var xhr = null;            if(window.XMLHttpRequest){                xhr = new XMLHttpRequest();//标准            }else{                xhr = new ActiveXObject(&quot;Microsoft&quot;);//IE6            }            // 2、准备发送            /*                参数一：请求方式（get获取数据；post提交数据）                参数二：请求地址                参数三：同步或者异步标志位，默认是true表示异步，false表示同步                            post请求参数通过send传递，不需要通过encodeURI()转码                必须设置请求头信息            */            var param = &apos;username=&apos;+uname+&apos;&amp;password=&apos;+pw;            ------------------------------------------------            get方法:            xhr.open(&apos;get&apos;,&apos;03get.php?&apos;+encodeURI(param),true);             // 3、执行发送动作                                             xhr.send(null);//get请求这里需要添加null参数              ------------------------------------------------            post方法:            xhr.open(&apos;post&apos;,&apos;04post.php&apos;,false);            // 3、执行发送动作            xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);            xhr.send(param);//post请求参数在这里传递，并且不需要转码            ------------------------------------------------            // 4、指定回调函数            xhr.onreadystatechange = function(){                if(xhr.readyState == 4){                    if(xhr.status == 200){                        var data = xhr.responseText;                        var info = document.getElementById(&apos;info&apos;);                    if(data == &apos;1&apos;){                        info.innerHTML = &apos;登录成功&apos;;                    }else if(data == &apos;2&apos;){                        info.innerHTML = &apos;用户名或者密码错误&apos;;                    }                }            }        }    }&lt;/script&gt;&lt;body&gt;    &lt;form&gt;        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;        &lt;span id=&quot;info&quot;&gt;&lt;/span&gt;        &lt;br&gt;         密码：&lt;input type=&quot;text&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;        &lt;input type=&quot;button&quot; value=&quot;登录&quot; id=&quot;btn&quot;&gt;    &lt;/form&gt;&lt;/body&gt;</code></pre><blockquote><p>PHP</p></blockquote><pre><code>&lt;?php    ----------------------------    $_GET方法:    $uname = $_GET[&apos;username&apos;];    $pw = $_GET[&apos;password&apos;];    ----------------------------    $_POST方法:    $uname = $_POST[&apos;username&apos;];    $pw = $_POST[&apos;password&apos;];    ----------------------------    if($uname == &apos;admin&apos; &amp;&amp; $pw == &apos;123&apos;){        echo 1;    }else{        echo $uname;    }?&gt;</code></pre><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="XML-数据格式"><a href="#XML-数据格式" class="headerlink" title="XML 数据格式"></a>XML 数据格式</h3><h4 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML"></a>什么是 XML</h4><ul><li>XML 指可扩展的标记语言</li><li>主要用来输出和存储数据<ul><li>设置宗旨是(传输数据)，而非显示数据</li></ul></li><li>XML 标签没有语义化，需要自行定义标签</li></ul><h4 id="XML-数据格式的缺点"><a href="#XML-数据格式的缺点" class="headerlink" title="XML 数据格式的缺点"></a>XML 数据格式的缺点</h4><ul><li>原数据占用的数据量比较大，不利于大量数据的网络传输</li><li>解析不太方便</li></ul><h4 id="XML-和-HTML-的区别"><a href="#XML-和-HTML-的区别" class="headerlink" title="XML 和 HTML 的区别"></a>XML 和 HTML 的区别</h4><ul><li>XML 是用来传输和存储数据的，而HTML被设计是用来显示数据的</li><li>XML 只在传输数据,HTML 只在显示信息</li></ul><h4 id="XML-的树结构"><a href="#XML-的树结构" class="headerlink" title="XML 的树结构"></a>XML 的树结构</h4><ul><li>XML 文档行程了的也是一种”树结构”</li><li><strong>XML文档必须包含根元素</strong>. 该元素是所有其他元素的父元素, 树结构从根开始,扩展到最低端</li></ul><h4 id="XML-的语法"><a href="#XML-的语法" class="headerlink" title="XML 的语法"></a>XML 的语法</h4><ul><li>所有 XML 元素都必须是闭合标签</li><li>XML 标签大小写明感,因此必须使用相同的大小写来编写打开标签和关闭标签</li><li>XML 必须正确的嵌套</li><li>XML 文档必须有根元素</li><li>XML 的属性值必须加引号</li><li>在 XML 中,空格会被保留</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="json-数据结构"><a href="#json-数据结构" class="headerlink" title="json 数据结构"></a>json 数据结构</h3><h4 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON"></a>什么是 JSON</h4><ul><li>JavaScript 对象表示法</li><li>是存储和交换文本信息的语法</li><li>轻量级的文本数据交换格式</li></ul><h4 id="JSON-数据和普通数据的-JS-兑现的区别"><a href="#JSON-数据和普通数据的-JS-兑现的区别" class="headerlink" title="JSON 数据和普通数据的 JS 兑现的区别"></a>JSON 数据和普通数据的 JS 兑现的区别</h4><ul><li>json 对象没有变量</li><li>json 形式的数据结尾没有分号</li><li>json 数据中的键必须用双引号包括</li></ul><h4 id="JSON-和-XML-对比"><a href="#JSON-和-XML-对比" class="headerlink" title="JSON 和 XML 对比"></a>JSON 和 XML 对比</h4><ul><li>JSON 比 XML 更小, 更快, 更易解析</li></ul><h3 id="json-数据解析"><a href="#json-数据解析" class="headerlink" title="json 数据解析"></a>json 数据解析</h3><ul><li><p>把 json 文本转换为 JavaScript 对象</p><blockquote><p>JSON 最常见的用法之一, 是从 Web 服务器上读取 JSON 数据(作为文件或作为HttpRequest), 将 JSON 数据转换为 JavaScript 对象, 然后在网页中使用该数据.</p></blockquote></li><li><p>为什么要转换</p><blockquote><p>在数据传输过程中, json 是以文本, 即字符串的形式传递的, 而 JS 操作的是 JSON 对象. 所以, JSON 对象和 JSON 字符串之间的相互转换是关键.</p></blockquote></li><li><p>转换的方法</p><ul><li><code>JSON_parse();</code> 把 json 形式的字符串转成对象</li><li><code>JSON_stringify();</code> 把对象转成字符串</li><li><code>eval()</code> 把字符串解析成 js 代码并执行</li></ul></li></ul><h3 id="JSON-数据接口"><a href="#JSON-数据接口" class="headerlink" title="JSON 数据接口"></a>JSON 数据接口</h3><ul><li><code>json_encode();</code> 把数组转换成 JSON 形式的字符串</li></ul><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul><li>同步<ul><li>重新加载页面</li><li>彼此等待</li></ul></li><li><p>异步</p><ul><li>局部加载页面</li><li>各做各的</li></ul></li><li><p>面试题：为什么JavaScript是单线程的却能让AJAX异步发送和回调请求</p><blockquote><p>JS运行在浏览器中，是单线程的，每个window一个JS线程，既然是单线程的，在某个特定的时刻只有特定的代码能够被执行，并阻塞其它的代码。而浏览器是事件驱动的（Event driven），浏览器中很多行为是异步（Asynchronized）的，会创建事件并放入执行队列中。javascript引擎是单线程处理它的任务队列，你可以理解成就是普通函数和回调函数构成的队列。当异步事件发生时，如mouse click, a timer firing, or an XMLHttpRequest completing（鼠标点击事件发生、定时器触发事件发生、XMLHttpRequest完成回调触发等），将他们放入执行队列，等待当前代码执行完成。</p></blockquote></li></ul><h2 id="Ajax跨域"><a href="#Ajax跨域" class="headerlink" title="Ajax跨域"></a>Ajax跨域</h2><ul><li><p>什么是跨域</p><blockquote><p>跨域是指从一个域名的网页去请求另一个域名的资源。只要 <strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>有任何一个的不同，就被当作是跨域。</p></blockquote></li><li><p>跨域解决方案</p><ul><li>jsonp,</li><li>document.domain + iframe,</li><li>location.hash + iframe,</li><li>window.name + iframe,</li><li>window.postMessage,</li><li><p>flash 等第三方方插件.</p><blockquote><p>大部分都是使用 jsonp.</p></blockquote></li></ul></li></ul><h3 id="JSONP-原理"><a href="#JSONP-原理" class="headerlink" title="JSONP 原理"></a>JSONP 原理</h3><ul><li><p>静态 script 标签的 src 实现跨域</p><ul><li>script标签里面的 async 属性表示异步加载资源, 默认是同步加载.</li></ul></li><li><p>动态创建 script 标签发出去的请求是异步请求.</p></li></ul><h3 id="jQuery-基本使用-ajax"><a href="#jQuery-基本使用-ajax" class="headerlink" title="jQuery 基本使用 ($.ajax)"></a>jQuery 基本使用 ($.ajax)</h3><pre><code>$.ajax({    url: &apos;地址&apos;,    type: &apos;请求数据方法 ( get post )&apos;,    dataType: &apos;返回的数据类型 (json jsonp )&apos;,    data: {后台接受的数据 : 获取某个数据},    jsonpCallback:&apos;为jsonp请求指定一个回调函数名&apos;}) success:function(返回的数据){    请求成功后的回调函数; };</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;前端相关的技术点&quot;&gt;&lt;a href=&quot;#前端相关的技术点&quot; class=&quot;headerlink&quot; title=&quot;前端相关的技术点&quot;&gt;&lt;/a&gt;前端相关的技术点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;html 主要用来实现页面的排版布局&lt;/li&gt;
&lt;li&gt;css 主要用来实现页面的样式美化&lt;/li&gt;
&lt;li&gt;javaScript 主要用来实现前端功能特效&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;采用上面的这些技术开发的页面和前端特效脚本需要放到服务器才能够对外提供服务，才能够让互联网上的网友看到。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
      <category term="ajax" scheme="http://blog.xuziyu.cn/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>vue小白学习笔记0--购物车</title>
    <link href="http://blog.xuziyu.cn/vue%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B00--%E8%B4%AD%E7%89%A9%E8%BD%A6.html"/>
    <id>http://blog.xuziyu.cn/vue小白学习笔记0--购物车.html</id>
    <published>2018-02-13T07:20:00.000Z</published>
    <updated>2019-03-16T07:34:33.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一个实战：写一个购物车实例<br>为了从零开始学习，vue.js文件是用引入的。<br>用两个v-for实现两个商品组<br><a id="more"></a></p></blockquote><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><pre><code>&lt;div id=&quot;app&quot; v-cloak&gt;    &lt;template v-if=&quot;list.length&quot;&gt;      &lt;table&gt;        &lt;thead&gt;          &lt;tr&gt;            &lt;th&gt;              &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; :checked=&quot;checkedAll&quot; @click=&quot;checkAll&quot;&gt;            &lt;/th&gt;            &lt;th&gt;序号&lt;/th&gt;            &lt;th&gt;商品名称&lt;/th&gt;            &lt;th&gt;商品单价&lt;/th&gt;            &lt;th&gt;购买数量&lt;/th&gt;            &lt;th&gt;操作&lt;/th&gt;          &lt;/tr&gt;        &lt;/thead&gt;        &lt;template v-for=&quot;(item,index) in newList&quot;&gt;          &lt;tbody :key=&quot;index&quot;&gt;            &lt;tr v-for=&quot;(item_child,idx) of item&quot;&gt;              &lt;td&gt;              &lt;!-- index,idx为参数 --&gt;                &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; :checked=&quot;item_child.checked&quot; @click=&quot;check(index,idx)&quot;&gt;              &lt;/td&gt;              &lt;td&gt;{{idx+1}}&lt;/td&gt;              &lt;td&gt;{{item_child.name}}&lt;/td&gt;              &lt;td&gt;{{item_child.price}}&lt;/td&gt;              &lt;td&gt;                &lt;button @click=&quot;handleReduce(idx)&quot; :disabled=&quot;item_child.disabled&quot;&gt;-&lt;/button&gt;                &lt;span&gt;{{item_child.count}}&lt;/span&gt;                &lt;button @click=&quot;handleAdd(idx)&quot;&gt;+&lt;/button&gt;              &lt;/td&gt;              &lt;td&gt;                &lt;button @click=&quot;handleRemove(idx)&quot;&gt;移除&lt;/button&gt;              &lt;/td&gt;            &lt;/tr&gt;          &lt;/tbody&gt;          &lt;hr&gt;        &lt;/template&gt;      &lt;/table&gt;      &lt;div&gt;总价：￥ {{totalPrice}} 元&lt;/div&gt;    &lt;/template&gt;    &lt;div v-else&gt;购物车为空&lt;/div&gt;  &lt;/div&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### script</span><br></pre></td></tr></table></figure>let app = new Vue({ el: &apos;#app&apos;, data: {   checkedAll: true,   list: [     [{         id: 1,         name: &apos;iPhone 7&apos;,         price: 1000,         count: 1,         checked: true,       },       {         id: 2,         name: &apos;iPad Pro&apos;,         price: 2000,         count: 1,         checked: true,       },       {         id: 1,         name: &apos;MacBook Pro&apos;,         price: 3000,         count: 1,         checked: true,       },     ],     [{         id: 1,         name: &apos;西瓜&apos;,         price: 10,         count: 1,         checked: true,       },       {         id: 2,         name: &apos;冬瓜&apos;,         price: 20,         count: 1,         checked: true,       },       {         id: 1,         name: &apos;南瓜&apos;,         price: 30,         count: 1,         checked: true,       },       {         id: 1,         name: &apos;黄瓜&apos;,         price: 30,         count: 1,         checked: true,       },     ]   ], }, /* 计算属性 */ computed: { //总价   totalPrice: function () {     let total = 0;     for (let i = 0; i &lt; this.list.length; i++) {       let arr = this.list[i];       for (let n = 0; n &lt; arr.length; n++) {         let arr_child = arr[n];         if (arr_child.checked === true) {           total += arr_child.price * arr_child.count;         }       }     }     // 返回添加千位分隔符的字符串     return total.toString().replace(/\B(?=(\d{3})+$)/g, &apos;,&apos;);   },   newList: function () {     for (let i = 0; i &lt; this.list.length; i++) {       let item = this.list[i];       // console.log(item);       for (let n = 0; n &lt; item.length; n++) {         let item_list = item[n];         if (item_list.count === 1) {           item_list.disabled = true         } else {           item_list.disabled = false         }       }     }     return this.list;   }, }, /* 方法 */ methods: {    //减少商品数量   handleReduce: function (index) {     if (this.list[index].count === 1) {       return;     }     this.list[index].count--;   },   //增加商品数量   handleAdd: function (index) {     this.list[index].count++   },   //删除商品   handleRemove: function (index) {     this.list.splice(index, 1);   },   //全选，全不选   checkAll: function () {     this.checkedAll = !this.checkedAll;     let this_checked;     for (let i = 0; i &lt; this.list.length; i++) {       let item = this.list[i];       for (let n = 0; n &lt; item.length; n++) {         let item_child = item[n];         item_child.checked = this.checkedAll;       }     }     console.log(&apos;全选：&apos;, this.checkedAll, &apos;, this_checked:&apos;, this.checkedAll);   },   //选中商品，取消选中   check: function (index, idx) {     this.list[index][idx].checked = !this.list[index][idx].checked;     for (let i = 0; i &lt; this.list.length; i++) {       let item = this.list[i];       for (let n = 0; n &lt; item.length; n++) {         let item_child = item[n];         if (item_child.checked === false) {           this.checkedAll = false;           return         } else {           this.checkedAll = true;         }       }     }     // console.log(&apos;改变后&apos;, this.newList);   } }, /*实例已挂载*/ mounted: function () {   // console.log(this.newList); }});</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一个实战：写一个购物车实例&lt;br&gt;为了从零开始学习，vue.js文件是用引入的。&lt;br&gt;用两个v-for实现两个商品组&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://blog.xuziyu.cn/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.xuziyu.cn/tags/vue/"/>
    
      <category term="vue小白学习笔记" scheme="http://blog.xuziyu.cn/tags/vue%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象编程</title>
    <link href="http://blog.xuziyu.cn/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html"/>
    <id>http://blog.xuziyu.cn/JavaScript面向对象编程.html</id>
    <published>2018-02-13T07:14:00.000Z</published>
    <updated>2019-03-16T07:34:33.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h2><p>其他语言中，对象的两个概念：</p><ol><li><strong>类</strong>：<strong>类是对象的类型模板</strong>，例如，定义<code>Student</code>类来表示学生，类本身是一种类型，<code>Student</code>表示学生类型，但不表示任何具体的某个学生；</li><li><strong>实例</strong>：<strong>实例是根据类创建的对象</strong>，例如，根据<code>Student</code>类可以创建出<code>xiaoming</code>、<code>xiaohong</code>、<code>xiaojun</code>等多个实例，每个实例表示一个具体的学生，他们全都属于<code>Student</code>类型。   </li></ol><p>所以，类和实例是大多数面向对象编程语言的基本概念。</p><h2 id="javaScript中对象的概念"><a href="#javaScript中对象的概念" class="headerlink" title="javaScript中对象的概念"></a>javaScript中对象的概念</h2><p>javaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。<br><a id="more"></a><br>原型是指我们要创建<code>xiaoming</code>这个具体的学生时，我们并没有一个<code>Student</code>类型可用。那怎么办？恰好有这么一个现成的对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var robot = &#123;</span><br><span class="line">    name: &apos;Robot&apos;,</span><br><span class="line">    height: 1.6,</span><br><span class="line">    run: function () &#123;</span><br><span class="line">        console.log(this.name + &apos; is running...&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们看这个<code>robot</code>对象有名字，有身高，还会跑，有点像小明，干脆就根据它来“创建”小明得了！<br>于是我们把它改名为<code>Student</code>，然后创建出<code>xiaoming</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var Student = &#123;</span><br><span class="line">    name: &apos;Robot&apos;,</span><br><span class="line">    height: 1.2,</span><br><span class="line">    run: function () &#123;</span><br><span class="line">        console.log(this.name + &apos; is running...&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &apos;小明&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.__proto__ = Student;</span><br></pre></td></tr></table></figure></p><p>注意最后一行代码把<code>xiaoming</code>的原型指向了对象<code>Student</code>，看上去<code>xiaoming</code>仿佛是从<code>Student</code>继承下来的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming.name; // &apos;小明&apos;</span><br><span class="line">xiaoming.run(); // 小明 is running...</span><br></pre></td></tr></table></figure></p><p><code>xiaoming</code>有自己的<code>name</code>属性，但并没有定义<code>run()</code>方法。不过，由于小明是从<code>Student</code>继承而来，只要<code>Student</code>有<code>run()</code>方法，<code>xiaoming</code>也可以调用：<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001435287613668a73ab76ccc85411282c1b1370be41636000/l" alt="image"><br>JavaScript的原型链和Java的Class区别就在，它没有“<strong>Class</strong>”的概念，所有对象都是实例，所谓<strong>继承关系不过是把一个对象的原型指向另一个对象而已</strong>。<br>如果你把<code>xiaoming</code>的原型指向其他对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Bird = &#123;</span><br><span class="line">    fly: function () &#123;</span><br><span class="line">        console.log(this.name + &apos; is flying...&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.__proto__ = Bird;</span><br></pre></td></tr></table></figure></p><p>现在<code>xiaoming</code>已经无法<code>run()</code>了，他已经变成了一只鸟：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaoming.fly(); // 小明 is flying...</span><br></pre></td></tr></table></figure></p><p>在JavaScrip代码运行时期，你可以把<code>xiaoming</code>从<code>Student</code>变成<code>Bird</code>，或者变成任何对象。  </p><blockquote><p>请注意，上述代码仅用于演示目的。在编写JavaScript代码时，不要直接用<code>obj.__proto__</code>去改变一个对象的原型，并且，低版本的IE也无法使用<code>__proto__</code>。<code>Object.create()</code>方法可以传入一个原型对象，并创建一个基于该原型的新对象，但是新对象什么属性都没有，因此，我们可以编写一个函数来创建<code>xiaoming</code>：  </p></blockquote><p>var Student = {// 原型对象<br>    name: ‘Robot’,<br>    height: 1.2,<br>    run: function () {<br>        console.log(this.name + ‘ is running…’);<br>    }<br>};</p><p>function createStudent(name) {<br>    // 基于Student原型创建一个新对象:<br>    var s = Object.create(Student);<br>    // 初始化新对象:<br>    s.name = name;<br>    return s;<br>}</p><p>var xiaoming = createStudent(‘小明’);<br>xiaoming.run(); // 小明 is running…<br>xiaoming.<strong>proto</strong> === Student; // true</p><p><strong>这是创建原型继承的一种方法</strong>  </p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><blockquote><p>JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。  </p></blockquote><p>当我们用<code>obj.xxx</code>访问一个对象的属性时，JavaScript引擎先在<strong>当前对象</strong>上查找该属性，如果没有找到，就到<strong>其原型对象</strong>上找，如果还没有找到，就一直上溯到<b><code>Object.prototype</code>对象</b>，最后，如果还没有找到，就只能返回<code>undefined</code>。<br>其原型链是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr ----&gt; Array.prototype ----&gt; Object.prototype ----&gt; null</span><br><span class="line">```  </span><br><span class="line">`Array.prototype`定义了`indexOf()`、`shift()`等方法，因此你可以在所有的`Array`对象上直接调用这些方法。  </span><br><span class="line">当我们创建一个函数时：</span><br></pre></td></tr></table></figure></p><p>function foo() {<br>    return 0;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数也是一个对象，它的原型链是：</span><br></pre></td></tr></table></figure></p><p>foo —-&gt; Function.prototype —-&gt; Object.prototype —-&gt; null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于`Function.prototype`定义了`apply()`等方法，因此，所有函数都可以调用`apply()`方法。  </span><br><span class="line">&gt; 很容易想到，如果原型链很长，那么访问一个对象的属性就会因为花更多的时间查找而变得更慢，因此要注意不要把原型链搞得太长。  </span><br><span class="line">### 构造函数</span><br><span class="line">除了直接用`&#123; ... &#125;`创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：</span><br></pre></td></tr></table></figure></p><p>function Student(name) {<br>    this.name = name;<br>    this.hello = function () {<br>        alert(‘Hello, ‘ + this.name + ‘!’);<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你会问，咦，这不是一个普通函数吗？  </span><br><span class="line">这确实是一个普通函数，但是在JavaScript中，可以用&lt;b&gt;关键字`new`&lt;/b&gt;来调用这个函数，并返回一个对象：</span><br></pre></td></tr></table></figure></p><p>var xiaoming = new Student(‘小明’);<br>xiaoming.name; // ‘小明’<br>xiaoming.hello(); // Hello, 小明!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注意，如果不写`new`，这就是一个普通函数，它返回`undefined`。但是，**如果写了`new`，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回`this`，也就是说，不需要在最后写`return this;`。**  </span><br><span class="line"></span><br><span class="line">新创建的`xiaoming`的原型链是：</span><br></pre></td></tr></table></figure></p><p>xiaoming —-&gt; Student.prototype —-&gt; Object.prototype —-&gt; null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也就是说，`xiaoming`的原型指向函数`Student`的原型。如果你又创建了`xiaohong`、`xiaojun`，那么这些对象的原型与`xiaoming`是一样的：</span><br></pre></td></tr></table></figure></p><p>xiaoming ↘<br>xiaohong -→ Student.prototype —-&gt; Object.prototype —-&gt; null<br>xiaojun  ↗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用`new Student()`创建的对象还从原型上获得了一个`constructor`属性，它指向函数`Student`本身：</span><br></pre></td></tr></table></figure></p><p>xiaoming.constructor === Student.prototype.constructor; // true<br>Student.prototype.constructor === Student; // true</p><p>Object.getPrototypeOf(xiaoming) === Student.prototype; // true</p><p>xiaoming instanceof Student; // true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">看晕了吧？用一张图来表示这些乱七八糟的关系就是：</span><br><span class="line">![image](https://cdn.liaoxuefeng.com/cdn/files/attachments/00143529922671163eebb527bc14547ac11363bf186557d000/l)</span><br><span class="line">`Student`创建了一个原型对象，`Student`通过属性`prototype`指向自身的原型对象，`xiaoming`、`xiaohong`也一样指向这个原型对象。这个原型对象自己有个属性`constructor`，可以指向创建自己的`Student`函数本身。</span><br><span class="line">&gt; 红色箭头是原型链。**注意，`Student.prototype`指向的对象就是`xiaoming`、`xiaohong`的原型对象，这个原型对象自己还有个属性`constructor`，指向`Student`函数本身**  </span><br><span class="line"></span><br><span class="line">&gt; 另外，函数`Student`恰好有个属性`prototype`指向`xiaoming`、`xiaohong`的原型对象，但是`xiaoming`、`xiaohong`这些对象可没有prototype这个属性，不过可以用`__proto__`这个非标准用法来查看。 </span><br><span class="line"></span><br><span class="line">不过还有一个小问题，注意观察：</span><br></pre></td></tr></table></figure></p><p>xiaoming.name; // ‘小明’<br>xiaohong.name; // ‘小红’<br>xiaoming.hello; // function: Student.hello()<br>xiaohong.hello; // function: Student.hello()<br>xiaoming.hello === xiaohong.hello; // false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`xiaoming`和`xiaohong`各自的`name`不同，这是对的，否则我们无法区分谁是谁了。  </span><br><span class="line">`xiaoming`和`xiaohong`各自的`hello`是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！  </span><br><span class="line">如果我们通过`new Student()`创建了很多对象，这些对象的`hello`函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。  </span><br><span class="line">要让创建的对象共享一个`hello`函数，根据对象的属性查找原则，我们只要把`hello`函数移动到`xiaoming`、`xiaohong`这些对象共同的原型上就可以了，也就是`Student.prototype`：  </span><br><span class="line">![image](https://cdn.liaoxuefeng.com/cdn/files/attachments/001435299854512faf32868f60348be878982909b5a5d04000/l)  </span><br><span class="line">修改代码如下：</span><br></pre></td></tr></table></figure></p><p>function Student(name) {<br>    this.name = name;<br>}</p><p>Student.prototype.hello = function () {<br>    alert(‘Hello, ‘ + this.name + ‘!’);<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用`new`创建基于原型的JavaScript的对象就是这么简单！  </span><br><span class="line">### 忘记写new怎么办</span><br><span class="line">如果一个函数被定义为用于创建对象的构造函数，但是调用时忘记了写`new`怎么办？  </span><br><span class="line">在strict模式下，`this.name = name`将报错，因为`this`绑定为`undefined`，在非strict模式下，`this.name = name`不报错，因为`this`绑定为`window`，于是无意间创建了全局变量`name`，并且返回`undefined`，这个结果更糟糕。  </span><br><span class="line">所以，调用构造函数千万不要忘记写`new`。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如*jslint*将可以帮你检测到漏写的`new`。  </span><br><span class="line">最后，我们还可以编写一个`createStudent()`函数，在内部封装所有的new操作。一个常用的编程模式像这样：</span><br></pre></td></tr></table></figure></p><p>function Student(props) {<br>    this.name = props.name || ‘匿名’; // 默认值为’匿名’<br>    this.grade = props.grade || 1; // 默认值为1<br>}</p><p>Student.prototype.hello = function () {<br>    alert(‘Hello, ‘ + this.name + ‘!’);<br>};</p><p>function createStudent(props) {<br>    return new Student(props || {})<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个`createStudent()`函数有几个巨大的优点：一是不需要`new`来调用，二是参数非常灵活，可以不传，也可以这么传：  </span><br><span class="line">*props参数传的是对象*</span><br></pre></td></tr></table></figure></p><p>var xiaoming = createStudent({<br>    name: ‘小明’<br>});</p><p>xiaoming.grade; // 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个**Object**，我们无需记忆参数的顺序。如果恰好从`JSON`拿到了一个对象，就可以直接创建出`xiaoming`。</span><br><span class="line">#### 练习</span><br><span class="line">请利用构造函数定义`Cat`，并让所有的`Cat`对象有一个`name`属性，并共享一个方法`say()`，返回字符串`&apos;Hello, xxx!&apos;`：</span><br><span class="line"></span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line">    function Cat(name)&#123;</span><br><span class="line">        this.name=name||&apos;匿名&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    Cat.prototype.say=function()&#123;</span><br><span class="line">        return &apos;Hello, &apos;+this.name+&apos;!&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt; 段落总结：如果创建的对象不可以共享的属性例如`name`要放在`Student`函数本身里,这样每次创建新对象都会通过指向的原型对象去复制函数本身的`name`,虽然相像但不是是同一个东西；  </span><br><span class="line">如果是可以共享的属性如`hello`，放在`Student`创建的原型里，每次使用的都是同一个属性。  </span><br><span class="line">## 原型继承</span><br><span class="line">在传统的基于Class的语言如Java、C++中，继承的本质是扩展一个已有的Class，并生成新的Subclass。  </span><br><span class="line">由于这类语言严格区分类和实例，**继承实际上是类型的扩展**。但是，**JavaScript**由于采用**原型继承**，我们无法直接扩展一个Class，**因为根本不存在Class这种类型**。  </span><br><span class="line">但是办法还是有的。我们先回顾`Student`构造函数：</span><br><span class="line"></span><br><span class="line">    function Student(props) &#123;</span><br><span class="line">        this.name = props.name || &apos;Unnamed&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student.prototype.hello = function () &#123;</span><br><span class="line">        alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">以及`Student`的原型链：</span><br><span class="line">![Student的原型链](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l)  </span><br><span class="line">现在，我们要基于`Student`扩展出`PrimaryStudent`，可以先定义出`PrimaryStudent`：  </span><br><span class="line"></span><br><span class="line">    function PrimaryStudent(props) &#123;</span><br><span class="line">        // 调用Student构造函数，绑定this变量:</span><br><span class="line">        Student.call(this, props);</span><br><span class="line">        this.grade = props.grade || 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">但是，调用了`Student`构造函数不等于继承了`Student`，`PrimaryStudent`创建的对象的原型是：  </span><br><span class="line"></span><br><span class="line">    new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null</span><br><span class="line"></span><br><span class="line">必须想办法把原型链修改为：</span><br><span class="line"></span><br><span class="line">    new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null</span><br><span class="line"></span><br><span class="line">这样，原型链对了，继承关系就对了。新的基于`PrimaryStudent`创建的对象不但能调用`PrimaryStudent.prototype`定义的方法，也可以调用`Student.prototype`定义的方法。  </span><br><span class="line"></span><br><span class="line">如果你想用最简单粗暴的方法这么干：</span><br><span class="line"></span><br><span class="line">PrimaryStudent.prototype = Student.prototype;</span><br><span class="line"></span><br><span class="line">是不行的！如果这样的话，`PrimaryStudent`和`Student`共享一个原型对象，那还要定义`PrimaryStudent`干啥？</span><br><span class="line"></span><br><span class="line">我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向`Student.prototype`。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：  </span><br><span class="line"></span><br><span class="line">    // PrimaryStudent构造函数:</span><br><span class="line">    function PrimaryStudent(props) &#123;</span><br><span class="line">        Student.call(this, props);</span><br><span class="line">        this.grade = props.grade || 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 空函数F:</span><br><span class="line">    function F() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 把F的原型指向Student.prototype:</span><br><span class="line">    F.prototype = Student.prototype;</span><br><span class="line"></span><br><span class="line">    // 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span><br><span class="line">    PrimaryStudent.prototype = new F();</span><br><span class="line"></span><br><span class="line">    // 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span><br><span class="line">    PrimaryStudent.prototype.constructor = PrimaryStudent;</span><br><span class="line"></span><br><span class="line">    // 继续在PrimaryStudent原型（就是new F()对象）上定义方法：</span><br><span class="line">    PrimaryStudent.prototype.getGrade = function () &#123;</span><br><span class="line">        return this.grade;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 创建xiaoming:</span><br><span class="line">    var xiaoming = new PrimaryStudent(&#123;</span><br><span class="line">        name: &apos;小明&apos;,</span><br><span class="line">        grade: 2</span><br><span class="line">    &#125;);</span><br><span class="line">    xiaoming.name; // &apos;小明&apos;</span><br><span class="line">    xiaoming.grade; // 2</span><br><span class="line"></span><br><span class="line">    // 验证原型:</span><br><span class="line">    xiaoming.__proto__ === PrimaryStudent.prototype; // true</span><br><span class="line">    xiaoming.__proto__.__proto__ === Student.prototype; // true</span><br><span class="line"></span><br><span class="line">    // 验证继承关系:</span><br><span class="line">    xiaoming instanceof PrimaryStudent; // true</span><br><span class="line">    xiaoming instanceof Student; // true</span><br><span class="line"></span><br><span class="line">用一张图来表示新的原型链：</span><br><span class="line">![新的原型链](https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l)</span><br><span class="line">注意，函数`F`仅用于桥接，我们仅创建了一个`new F()`实例，而且，没有改变原有的`Student`定义的原型链。</span><br><span class="line"></span><br><span class="line">如果把继承这个动作用一个`inherits()`函数封装起来，还可以隐藏`F`的定义，并简化代码：</span><br><span class="line"></span><br><span class="line">    function inherits(Child, Parent) &#123;</span><br><span class="line">        var F = function () &#123;&#125;;</span><br><span class="line">        F.prototype = Parent.prototype;</span><br><span class="line">        Child.prototype = new F();</span><br><span class="line">        Child.prototype.constructor = Child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    这个`inherits()`函数可以复用： </span><br><span class="line"></span><br><span class="line">    function Student(props) &#123;</span><br><span class="line">        this.name = props.name || &apos;Unnamed&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student.prototype.hello = function () &#123;</span><br><span class="line">        alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function PrimaryStudent(props) &#123;</span><br><span class="line">        Student.call(this, props);</span><br><span class="line">        this.grade = props.grade || 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现原型继承链:</span><br><span class="line">    inherits(PrimaryStudent, Student);</span><br><span class="line"></span><br><span class="line">    // 绑定其他方法到PrimaryStudent原型:</span><br><span class="line">    PrimaryStudent.prototype.getGrade = function () &#123;</span><br><span class="line">        return this.grade;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">#### 小结</span><br><span class="line">JavaScript的原型继承实现方式就是：</span><br><span class="line">1. 定义新的构造函数，并在内部用`call()`调用希望“继承”的构造函数，并绑定`this`；</span><br><span class="line">2. 借助中间函数F实现原型链继承，最好通过封装的`inherits`函数完成；</span><br><span class="line">3. 继续在新的构造函数的原型上定义新方法。</span><br><span class="line">## class继承  </span><br><span class="line">&gt; 在上面的章节中我们看到了JavaScript的对象模型是基于原型实现的，特点是简单，缺点是理解起来比传统的类－实例模型要困难，最大的缺点是继承的实现需要编写大量代码，并且需要正确实现原型链。  </span><br><span class="line"></span><br><span class="line">有没有更简单的写法？有！</span><br><span class="line"></span><br><span class="line">新的关键字`class`从ES6开始正式被引入到JavaScript中。`class`的目的就是让定义类更简单。</span><br><span class="line"></span><br><span class="line">我们先回顾用函数实现`Student`的方法：</span><br><span class="line"></span><br><span class="line">    function Student(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student.prototype.hello = function () &#123;</span><br><span class="line">        alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">如果用新的`class`关键字来编写`Student`，可以这样写：  </span><br><span class="line"></span><br><span class="line">    class Student &#123;</span><br><span class="line">        constructor(name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hello() &#123;</span><br><span class="line">            alert(&apos;Hello, &apos; + this.name + &apos;!&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">比较一下就可以发现，`class`的定义包含了构造函数`constructor`和定义在原型对象上的函数`hello()`（*注意没有function关键字*），这样就避免了`Student.prototype.hello = function () &#123;...&#125;`这样分散的代码。  </span><br><span class="line">最后，创建一个`Student`对象代码和前面章节完全一样：</span><br></pre></td></tr></table></figure></p><p>var xiaoming = new Student(‘小明’);<br>xiaoming.hello();<br><code>`</code></p><h3 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h3><p>用<code>class</code>定义对象的另一个巨大的好处是继承更方便了。想一想我们从<code>Student</code>派生一个<code>PrimaryStudent</code>需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过<code>extends</code>来实现：  </p><pre><code>class PrimaryStudent extends Student {    constructor(name, grade) {        super(name); // 记得用super调用父类的构造方法!        this.grade = grade;    }    myGrade() {        alert(&apos;I am at grade &apos; + this.grade);    }}</code></pre><blockquote><p>注意<code>PrimaryStudent</code>的定义也是<code>class</code>关键字实现的，而<code>extends</code>则表示原型链对象来自<code>Student</code>。子类的构造函数可能会与父类不太相同，例如，<code>PrimaryStudent</code>需要<code>name</code>和<code>grade</code>两个参数，并且需要通过<code>super(name)</code>来调用父类的构造函数，否则父类的<code>name</code>属性无法正常初始化。</p></blockquote><p><code>PrimaryStudent</code>已经自动获得了父类<code>Student</code>的<code>hello</code>方法，我们又在子类中定义了新的<code>myGrade</code>方法。  </p><p>ES6引入的<code>class</code>和原有的<code>JavaScript</code>原型继承有什么区别呢？实际上它们没有任何区别，<code>class</code>的作用就是让<code>JavaScript</code>引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。  </p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>请利用<code>class</code>重新定义<code>Cat</code>，并让它从已有的<code>Animal</code>继承，然后新增一个方法<code>say()</code>，返回字符串<code>&#39;Hello, xxx!&#39;</code>：</p><pre><code>&apos;use strict&apos;;class Animal {    constructor(name) {        this.name = name;    }}class Cat extends Animal{  constructor(name){    super(name);  }  say(){    return `Hello, ${this.name}!`;  }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论是ES5还是ES6还都是使用<code>prototype</code>原型继承的方式来模拟其他语言中类和实例的方式来实现原型继承。<br><code>class</code>只是把代码抽象一下，从语言层面看上去跟其他语言差不多了，背后并没有改变。</p><p>不过日常工作没有关系，尽情使用class来实现面向对象编程好了。背后的处理交给工程化工具。</p><blockquote><p>基本照抄廖雪峰老师的文章，插入了一些自己的感想。<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499763408e24c210985d34edcabbca944b4239e20000" target="_blank" rel="noopener">原文地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象的概念&quot;&gt;&lt;a href=&quot;#对象的概念&quot; class=&quot;headerlink&quot; title=&quot;对象的概念&quot;&gt;&lt;/a&gt;对象的概念&lt;/h2&gt;&lt;p&gt;其他语言中，对象的两个概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;类&lt;/strong&gt;：&lt;strong&gt;类是对象的类型模板&lt;/strong&gt;，例如，定义&lt;code&gt;Student&lt;/code&gt;类来表示学生，类本身是一种类型，&lt;code&gt;Student&lt;/code&gt;表示学生类型，但不表示任何具体的某个学生；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例&lt;/strong&gt;：&lt;strong&gt;实例是根据类创建的对象&lt;/strong&gt;，例如，根据&lt;code&gt;Student&lt;/code&gt;类可以创建出&lt;code&gt;xiaoming&lt;/code&gt;、&lt;code&gt;xiaohong&lt;/code&gt;、&lt;code&gt;xiaojun&lt;/code&gt;等多个实例，每个实例表示一个具体的学生，他们全都属于&lt;code&gt;Student&lt;/code&gt;类型。   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，类和实例是大多数面向对象编程语言的基本概念。&lt;/p&gt;
&lt;h2 id=&quot;javaScript中对象的概念&quot;&gt;&lt;a href=&quot;#javaScript中对象的概念&quot; class=&quot;headerlink&quot; title=&quot;javaScript中对象的概念&quot;&gt;&lt;/a&gt;javaScript中对象的概念&lt;/h2&gt;&lt;p&gt;javaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>时间的处理</title>
    <link href="http://blog.xuziyu.cn/%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86.html"/>
    <id>http://blog.xuziyu.cn/时间的处理.html</id>
    <published>2018-02-13T06:51:00.000Z</published>
    <updated>2019-03-16T07:34:33.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript中的时间处理"><a href="#JavaScript中的时间处理" class="headerlink" title="JavaScript中的时间处理"></a>JavaScript中的时间处理</h2><h3 id="Js获取当前日期时间及其它操作"><a href="#Js获取当前日期时间及其它操作" class="headerlink" title="Js获取当前日期时间及其它操作"></a>Js获取当前日期时间及其它操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var myDate = new Date();</span><br><span class="line">myDate.getYear();        //获取当前年份(2位)</span><br><span class="line">myDate.getFullYear();    //获取完整的年份(4位,1970-????)</span><br><span class="line">myDate.getMonth();       //获取当前月份(0-11,0代表1月)</span><br><span class="line">myDate.getDate();        //获取当前日(1-31)</span><br><span class="line">myDate.getDay();         //获取当前星期X(0-6,0代表星期天)</span><br><span class="line">myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)</span><br><span class="line">myDate.getHours();       //获取当前小时数(0-23)</span><br><span class="line">myDate.getMinutes();     //获取当前分钟数(0-59)</span><br><span class="line">myDate.getSeconds();     //获取当前秒数(0-59)</span><br><span class="line">myDate.getMilliseconds();    //获取当前毫秒数(0-999)</span><br><span class="line">myDate.toLocaleDateString();     //获取当前日期</span><br><span class="line">var mytime=myDate.toLocaleTimeString();     //获取当前时间</span><br><span class="line">myDate.toLocaleString( );        //获取日期与时间</span><br></pre></td></tr></table></figure><ul><li>这些方法获取到的是数字，要显示的话要使用<code>.toString()</code>转换成字符串  。</li><li>获取当前月份，需要<code>myDate.getMonth() - 1</code>。  <a id="more"></a></li></ul><h4 id="定义日期"><a href="#定义日期" class="headerlink" title="定义日期"></a>定义日期</h4><p>Date 对象用于处理日期和时间。<br>可以通过 new 关键词来定义 Date 对象。以下代码定义了名为 myDate 的 Date 对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myDate=new Date()</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注释</strong>：Date 对象自动使用当前的日期和时间作为其初始值。  </p></blockquote><h4 id="操作日期"><a href="#操作日期" class="headerlink" title="操作日期"></a>操作日期</h4><p>通过使用针对日期对象的方法，我们可以很容易地对日期进行操作。<br>在下面的例子中，我们为日期对象设置了一个特定的日期 (2008 年 8 月 9 日)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myDate=new Date()</span><br><span class="line">myDate.setFullYear(2008,7,9)</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：表示月份的参数介于 0 到 11 之间。也就是说，如果希望把月设置为 8 月，则参数应该是 7。</p></blockquote><p>在下面的例子中，我们将日期对象设置为 5 天后的日期：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myDate=new Date()</span><br><span class="line">myDate.setDate(myDate.getDate()+5)</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：如果增加天数会改变月份或者年份，那么日期对象会自动完成这种转换。</p></blockquote><h3 id="比较日期（计算年龄）"><a href="#比较日期（计算年龄）" class="headerlink" title="比较日期（计算年龄）"></a>比较日期<small>（计算年龄）</small></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let nowDate=new Date();//当前时间</span><br><span class="line">let myDate=new Date();</span><br><span class="line">myDate.setFullYear(myYear,myMonth-1,myDay);//出生时间</span><br><span class="line">let newDate=nowDate.getTime()-myDate.getTime();//时间差（单位：毫秒）</span><br><span class="line">// 向下取整  例如 10岁 20天 会计算成 10岁</span><br><span class="line">// 如果要向上取整 计算成11岁，把floor替换成 ceil</span><br><span class="line">var age = Math.ceil(newDate / 1000 / 60 / 60 / 24 /365);</span><br><span class="line">if (isNaN(age))&#123;</span><br><span class="line">    age = &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">return age;</span><br></pre></td></tr></table></figure><h3 id="把时间戳转换为日期"><a href="#把时间戳转换为日期" class="headerlink" title="把时间戳转换为日期"></a>把时间戳转换为日期</h3><p>得到后台从数据库中拿到的数据我们希望格式是  <code>2016年10月25日 17时37分30秒</code>　或者 <code>2016/10/25 17:37:30</code></p><p>然而我们前台得到的却是一段数字（时间戳，毫秒数）  <code>1477386005</code></p><p>我们要将时间戳转化为我们想要的格式。  </p><p>核心方法 ：</p><blockquote><p>1477386005是我从后台得到时间戳 （注意：有的时候得到的时间戳是已经乘以1000的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var unixTimestamp = new Date( 1477386005*1000 ) ; //转化时间戳</span><br><span class="line">commonTime = unixTimestamp.toLocaleString(); //获得日期</span><br><span class="line">alert(commonTime);</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*数字是个位，前面补足0*/</span><br><span class="line">function formatTime(num)&#123;</span><br><span class="line">    if(num&lt;10)</span><br><span class="line">    return &apos;0&apos;+num</span><br><span class="line">    else</span><br><span class="line">    return num+&apos;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我希望转换为我自己想要的格式，就在本页面重写一下 toLocaleString()方法即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Date.prototype.toLocaleString = function() &#123; </span><br><span class="line">var getFullYear=formatTime(this.getFullYear());</span><br><span class="line">    var getMonth=formatTime(this.getMonth() + 1);</span><br><span class="line">    var getDate=formatTime(this.getDate());</span><br><span class="line">    var getHours=formatTime(this.getHours());</span><br><span class="line">    var getMinutes=formatTime(this.getMinutes());</span><br><span class="line">    var getSeconds=formatTime(this.getSeconds());</span><br><span class="line">return getFullYear + &quot;年&quot; + getMonth + &quot;月&quot; + getDate + &quot;日 &quot; + getHours + &quot;点&quot; + getMinutes + &quot;分&quot; + getSeconds + &quot;秒&quot;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>或者用函数实现  </p><pre><code>const formatTime = date =&gt; {  const year = date.getFullYear()  const month = date.getMonth() + 1  const day = date.getDate()  const hour = date.getHours()  const minute = date.getMinutes()  const second = date.getSeconds()  //.map()返回一个新数组  return [year, month, day].map(formatNumber).join(&apos;/&apos;) + &apos; &apos; + [hour, minute, second].map(formatNumber).join(&apos;:&apos;)}//个位数补零const formatNumber = n =&gt; {  n = n.toString()  //判断字符串是否有两个，否则补零  return n[1] ? n : &apos;0&apos; + n}</code></pre><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var t;</span><br><span class="line">var seconds;</span><br><span class="line">/*计时器*/</span><br><span class="line">function timing()&#123;</span><br><span class="line">    seconds = 0;</span><br><span class="line">    if (seconds &gt; 21599) &#123;</span><br><span class="line">      let time = &apos;6小时，不想继续了gg&apos;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    t = setTimeout(function()&#123;</span><br><span class="line">        seconds=seconds+1;</span><br><span class="line">        timing();</span><br><span class="line">    &#125;,1000);</span><br><span class="line">    formatSeconds(seconds);</span><br><span class="line">&#125;</span><br><span class="line">/*输出计时文字*/</span><br><span class="line">function formatSeconds(seconds)&#123;</span><br><span class="line">    var mins=0,hours=0,time=&apos;&apos;;</span><br><span class="line">    if(seconds&lt;3600)&#123;</span><br><span class="line">      mins = parseInt(seconds /60)</span><br><span class="line">      seconds=seconds%60</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      mins=parseInt(seconds/60)</span><br><span class="line">      seconds=seconds%60</span><br><span class="line">      hours=parseInt(mins/60)</span><br><span class="line">      mins=mins%60</span><br><span class="line">    &#125;</span><br><span class="line">    time=formatTime(hours)+&apos;:&apos;+formatTime(mins)+&apos;:&apos;+formatTime(seconds);</span><br><span class="line">    return time;</span><br><span class="line">&#125;</span><br><span class="line">/*数字是个位，前面补足0*/</span><br><span class="line">function formatTime(num)&#123;</span><br><span class="line">    if(num&lt;10)</span><br><span class="line">    return &apos;0&apos;+num</span><br><span class="line">    else</span><br><span class="line">    return num+&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">/* 停止计时 */</span><br><span class="line">function stopCount()&#123;</span><br><span class="line">    clearTimeout(t);</span><br><span class="line">    console.log(&apos;结束游戏，游戏时长为：&apos;,seconds,&apos;秒&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒计时（目前能用，还需改进）"><a href="#倒计时（目前能用，还需改进）" class="headerlink" title="倒计时（目前能用，还需改进）"></a>倒计时<small>（目前能用，还需改进）</small></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*数字是个位，前面补足0*/</span><br><span class="line">function formatTime(num)&#123;</span><br><span class="line">    if(num&lt;10)</span><br><span class="line">    return &apos;0&apos;+num</span><br><span class="line">    else</span><br><span class="line">    return num+&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">var lastSeconds=$(&apos;#seconds&apos;).val();//获取到结束日期（这里单位是秒）</span><br><span class="line">var timeAdd=0;</span><br><span class="line">var interval=1000;</span><br><span class="line">function leftTimer()&#123;</span><br><span class="line">    timeAdd=timeAdd+1;</span><br><span class="line">    var leftTime=lastSeconds - timeAdd;//减少后的时间</span><br><span class="line">    if(leftTime&gt;=0)&#123;</span><br><span class="line">            var days=parseInt(leftTime/60/60/24,10);//天</span><br><span class="line">            var hours=parseInt(leftTime/60/60%24,10);//小时</span><br><span class="line">            var minutes =parseInt(leftTime/60%60,10);//分钟</span><br><span class="line">            var seconds =parseInt(leftTime%60,10);//秒</span><br><span class="line">            days = formatTime(days);</span><br><span class="line">            hours = formatTime(hours);</span><br><span class="line">            minutes = formatTime(minutes);</span><br><span class="line">            seconds = formatTime(seconds);</span><br><span class="line">            $(&apos;#timer&apos;).text(days+&quot;天&quot; + hours+&quot;小时&quot; + minutes+&quot;分&quot;+seconds+&quot;秒&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        //如果时间到期，do something...</span><br><span class="line">            $(&apos;#btn-refund&apos;).attr(&apos;disabled&apos;,&quot;true&quot;).css(&#123;&apos;pointer-events&apos;:&apos;none&apos;,&apos;background-color&apos;:&apos;#dddddd&apos;&#125;);//添加disabled属性，禁用按钮</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.setInterval(function()&#123;leftTimer();&#125;, interval);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript中的时间处理&quot;&gt;&lt;a href=&quot;#JavaScript中的时间处理&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的时间处理&quot;&gt;&lt;/a&gt;JavaScript中的时间处理&lt;/h2&gt;&lt;h3 id=&quot;Js获取当前日期时间及其它操作&quot;&gt;&lt;a href=&quot;#Js获取当前日期时间及其它操作&quot; class=&quot;headerlink&quot; title=&quot;Js获取当前日期时间及其它操作&quot;&gt;&lt;/a&gt;Js获取当前日期时间及其它操作&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myDate = new Date();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getYear();        //获取当前年份(2位)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getFullYear();    //获取完整的年份(4位,1970-????)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getMonth();       //获取当前月份(0-11,0代表1月)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getDate();        //获取当前日(1-31)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getDay();         //获取当前星期X(0-6,0代表星期天)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getHours();       //获取当前小时数(0-23)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getMinutes();     //获取当前分钟数(0-59)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getSeconds();     //获取当前秒数(0-59)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.getMilliseconds();    //获取当前毫秒数(0-999)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.toLocaleDateString();     //获取当前日期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var mytime=myDate.toLocaleTimeString();     //获取当前时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myDate.toLocaleString( );        //获取日期与时间&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这些方法获取到的是数字，要显示的话要使用&lt;code&gt;.toString()&lt;/code&gt;转换成字符串  。&lt;/li&gt;
&lt;li&gt;获取当前月份，需要&lt;code&gt;myDate.getMonth() - 1&lt;/code&gt;。
    
    </summary>
    
      <category term="项目实战" scheme="http://blog.xuziyu.cn/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>解决软键盘弹窗 fixed失效问题</title>
    <link href="http://blog.xuziyu.cn/%E8%A7%A3%E5%86%B3%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E7%AA%97%20fixed%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98.html"/>
    <id>http://blog.xuziyu.cn/解决软键盘弹窗 fixed失效问题.html</id>
    <published>2018-02-13T01:16:00.000Z</published>
    <updated>2019-03-16T07:34:33.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>这个问题常出现在移动web开发中聊天或者留言页面的绝对定位输入框上，页面超过屏幕大小时候输入框focus状态下（键盘弹出）绝对定位的元素失效，导致页面滚动时候把定位元素一并带走，体验十分不好，在此留下一自己的方法，让更多的人不需要再爬这样的小坑。</p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>原理很简单，就是定义一个外框把页面包起来，把需要使用fixed定位的元素设置成<code>absolute</code>定位，然后设置外框元素的样式即可，下面是实例：<br>假设外框元素为<code>.wrap</code>，需要fixed定位的元素为<code>.position</code>：<br><a id="more"></a></p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body class=&quot;wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;position&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;js-searchKey&quot; class=&quot;search-input&quot; placeholder=&quot;关键词搜索&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">body.full-body&#123;</span><br><span class="line">    position: fixed !important;</span><br><span class="line">    top: 0 !important;</span><br><span class="line">    right: 0 !important;</span><br><span class="line">    bottom: 0 !important;</span><br><span class="line">    left: 0 !important;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">    height: 100% !important;</span><br><span class="line">    padding: 0 !important;</span><br><span class="line">    margin: 0 !important;</span><br><span class="line">    overflow: hidden !important;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line">.fixed-bug&#123;</span><br><span class="line">    position: absolute !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><blockquote><p>当input获取焦点，弹出软键盘的时候，就切添加解决bug的class；反之，删除解决bug的class。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function addBodyClass(element)&#123;</span><br><span class="line">    $(&apos;body&apos;).addClass(&apos;full-body&apos;);</span><br><span class="line">    $(element).addClass(&apos;fixed-bug&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function removeBodyClass(element)&#123;</span><br><span class="line">    $(&apos;body&apos;).removeClass(&apos;full-body&apos;);</span><br><span class="line">    $(element).removeClass(&apos;fixed-bug&apos;);</span><br><span class="line">&#125;</span><br><span class="line">$(&quot;#js-searchKey&quot;).on(&apos;focus&apos;,function()&#123;</span><br><span class="line">    var $fixed=$(&apos;.position&apos;);</span><br><span class="line">    addBodyClass($fixed);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;#js-searchKey&quot;).on(&apos;blur&apos;,function()&#123;</span><br><span class="line">    var $fixed=$(&apos;.position&apos;);</span><br><span class="line">    removeBodyClass($fixed);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这个问题常出现在移动web开发中聊天或者留言页面的绝对定位输入框上，页面超过屏幕大小时候输入框focus状态下（键盘弹出）绝对定位的元素失效，导致页面滚动时候把定位元素一并带走，体验十分不好，在此留下一自己的方法，让更多的人不需要再爬这样的小坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;&lt;p&gt;原理很简单，就是定义一个外框把页面包起来，把需要使用fixed定位的元素设置成&lt;code&gt;absolute&lt;/code&gt;定位，然后设置外框元素的样式即可，下面是实例：&lt;br&gt;假设外框元素为&lt;code&gt;.wrap&lt;/code&gt;，需要fixed定位的元素为&lt;code&gt;.position&lt;/code&gt;：&lt;br&gt;
    
    </summary>
    
      <category term="项目实战" scheme="http://blog.xuziyu.cn/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
      <category term="css" scheme="http://blog.xuziyu.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>表单验证（输入完成，手机号，金额）</title>
    <link href="http://blog.xuziyu.cn/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%EF%BC%88%E8%BE%93%E5%85%A5%E5%AE%8C%E6%88%90%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%EF%BC%8C%E9%87%91%E9%A2%9D%EF%BC%89.html"/>
    <id>http://blog.xuziyu.cn/表单验证（输入完成，手机号，金额）.html</id>
    <published>2018-02-04T01:18:00.000Z</published>
    <updated>2019-03-16T07:34:33.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h2><ul><li>金额验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 正小数，小数点后两位，数值最前不能有0。</span><br><span class="line">//&apos;(\.[0-9]&#123;1,2&#125;)?$)&apos;修改其中的&apos;2&apos;，可以改变小数点后位数的验证</span><br><span class="line">var reg = /(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/;</span><br><span class="line">var money = &quot;520.100&quot;;</span><br><span class="line">console.log(reg.test(money));//true</span><br><span class="line">//000 错</span><br><span class="line">//0 对</span><br><span class="line">//0. 错</span><br><span class="line">//0.0 对</span><br><span class="line">//050 错</span><br><span class="line">//00050.12错</span><br><span class="line">//70.1 对</span><br><span class="line">//70.11 对</span><br><span class="line">//70.111错</span><br><span class="line">//500 正确</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>金额数值保留两位小数，一位自动补零</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//round() 方法可把一个数字舍入为最接近的整数：</span><br><span class="line">//parseFloat() 函数可解析一个字符串，并返回一个浮点数。</span><br><span class="line">   function returnFloat(value) &#123;</span><br><span class="line">       var value = Math.round(parseFloat(value) * 100) / 100;//舍入为小数点后两位</span><br><span class="line">       var xsd = value.toString().split(&quot;.&quot;);//分割成数组</span><br><span class="line">       //小数点后没有值，就添加&apos;.00&apos;</span><br><span class="line">       if (xsd.length == 1) &#123;</span><br><span class="line">           value = value.toString() + &quot;.00&quot;;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line">       //小数点后只有1位，就添加&apos;0&apos;</span><br><span class="line">       if (xsd.length &gt; 1) &#123;</span><br><span class="line">           if (xsd[1].length &lt; 2) &#123;</span><br><span class="line">               value = value.toString() + &quot;0&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>手机号码验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//验证phoneNum,正确返回true,错误返回false</span><br><span class="line">function checkMobile(phoneNum) &#123;</span><br><span class="line">   var reg_phone = /^[1][0-9][0-9]&#123;9&#125;$/;</span><br><span class="line">    var regPhone = new RegExp(reg_phone);</span><br><span class="line">    if (regPhone.test(phoneNum)) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送验证码，倒计时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*发送验证码倒计时*/</span><br><span class="line">var countdown = 60;//倒计时为60秒</span><br><span class="line">function settime(obj) &#123;//obj为获取验证码按钮</span><br><span class="line">    if (countdown == 0) &#123;//如果倒计时为0,重置倒计时为60秒，恢复按钮功能和文字</span><br><span class="line">        // obj.attr(&apos;disabled&apos;,false);</span><br><span class="line">        obj.removeAttr(&quot;disabled&quot;).removeClass(&apos;weui-btn_disabled&apos;).text(&quot;获取验证码&quot;);</span><br><span class="line">        countdown = 60;</span><br><span class="line">        return;</span><br><span class="line">    &#125; else &#123;//如果倒计时不为0,禁用按钮，显示倒计时，倒计时自减1</span><br><span class="line">        obj.attr(&apos;disabled&apos;, true).addClass(&apos;weui-btn_disabled&apos;).text(&quot;重新发送(&quot; + countdown + &quot;)&quot;);</span><br><span class="line">        countdown--;</span><br><span class="line">    &#125;</span><br><span class="line">    // 每1000毫秒执行一次settime(obj)</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        settime(obj);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">$(&quot;.js-btn-get-code&quot;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">    var $btn = $(this);</span><br><span class="line">    var tel_val=$(&quot;#mobile&quot;).val();</span><br><span class="line">    if(checkMobile(tel_val)===true)&#123;</span><br><span class="line">        settime($btn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="判断输入完成"><a href="#判断输入完成" class="headerlink" title="判断输入完成"></a>判断输入完成</h2><ul><li><p>每次输入都进行判断，（可用于验证成功时，执行其他函数，比如给成功提示，或者改变状态）</p><blockquote><p>因为正则的关系且是每次输入完成就验证，导致输入到小数点’.’的时候就会报错。（解决办法是修改正则，可惜本人正则方面的知识很捉急）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//.bind(&apos;input propertychange&apos;,function()&#123;//do something&#125;)//每次输入完成后执行do something</span><br><span class="line">$(&quot;#moneyCustom&quot;).bind(&apos;input propertychange&apos;, function () &#123;</span><br><span class="line">        var moneyCustom = $(this).val();</span><br><span class="line">        var moneyCustom_end = returnFloat(moneyCustom);</span><br><span class="line">        console.log(moneyCustom);</span><br><span class="line">        if (moneyCustom) &#123;</span><br><span class="line">            var reg = /(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/;</span><br><span class="line">            if (!reg.test(moneyCustom)) &#123;</span><br><span class="line">                $.alert(&#123;</span><br><span class="line">                    title: &apos;提示信息&apos;,</span><br><span class="line">                    text: &apos;赞赏金额的输入格式不正确,请确认!&apos;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(this).val(&quot;&quot;);</span><br><span class="line">                $(&quot;#moneyTotal&quot;).val(&quot;0.00&quot;);</span><br><span class="line">                changeNum();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            $(&quot;#moneyTotal&quot;).val(moneyCustom_end);</span><br><span class="line">            //金额的正则表达式验证</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $(&quot;#moneyTotal&quot;).val(&quot;0.00&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $(&quot;.js-reward-list&quot;).find(&quot;li.active&quot;).removeClass(&quot;active&quot;).end().find(&quot;.iconfont&quot;).remove();</span><br><span class="line">        changeNum();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>输入后延迟一段时间进行验证</p><blockquote><p>假设用户输入完成后，一段时间没操作，就判断为输入完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var queue;</span><br><span class="line">   $(&quot;#moneyCustom&quot;).on(&apos;keyup&apos;, function (e) &#123;</span><br><span class="line">       var $this=$(this);</span><br><span class="line">       clearTimeout(queue);</span><br><span class="line">       //键盘输入离开后，1000毫秒后执行</span><br><span class="line">       queue = setTimeout(function () &#123;</span><br><span class="line">           var moneyCustom = $this.val();</span><br><span class="line">           var moneyCustom_end = returnFloat(moneyCustom);</span><br><span class="line">           console.log(moneyCustom);</span><br><span class="line">           if (moneyCustom) &#123;</span><br><span class="line">               var reg = /(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/;</span><br><span class="line">               //金额的正则表达式验证</span><br><span class="line">               if (!reg.test(moneyCustom)) &#123;</span><br><span class="line">                   $.alert(&#123;</span><br><span class="line">                       title: &apos;提示信息&apos;,</span><br><span class="line">                       text: &apos;打赏金额只能保留小数点后两位哦~&apos;</span><br><span class="line">                   &#125;);</span><br><span class="line">                   $this.val(&quot;&quot;);</span><br><span class="line">                   $(&quot;#moneyTotal&quot;).val(&quot;0.00&quot;);</span><br><span class="line">                   changeNum();</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">               $(&quot;#moneyTotal&quot;).val(moneyCustom_end);</span><br><span class="line">               </span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               $(&quot;#moneyTotal&quot;).val(&quot;0.00&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           $(&quot;.js-reward-list&quot;).find(&quot;li.active&quot;).removeClass(&quot;active&quot;).end().find(&quot;.iconfont&quot;).remove();</span><br><span class="line">           changeNum();</span><br><span class="line">       &#125;, 1000);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础函数&quot;&gt;&lt;a href=&quot;#基础函数&quot; class=&quot;headerlink&quot; title=&quot;基础函数&quot;&gt;&lt;/a&gt;基础函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;金额验证&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 正小数，小数点后两位，数值最前不能有0。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;apos;(\.[0-9]&amp;#123;1,2&amp;#125;)?$)&amp;apos;修改其中的&amp;apos;2&amp;apos;，可以改变小数点后位数的验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var reg = /(^[1-9]([0-9]+)?(\.[0-9]&amp;#123;1,2&amp;#125;)?$)|(^(0)&amp;#123;1&amp;#125;$)|(^[0-9]\.[0-9]([0-9])?$)/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var money = &amp;quot;520.100&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(reg.test(money));//true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//000 错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//0 对&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//0. 错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//0.0 对&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//050 错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//00050.12错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//70.1 对&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//70.11 对&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//70.111错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//500 正确&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目实战" scheme="http://blog.xuziyu.cn/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="javascript" scheme="http://blog.xuziyu.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端开发环境搭建</title>
    <link href="http://blog.xuziyu.cn/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://blog.xuziyu.cn/前端开发环境搭建.html</id>
    <published>2018-02-03T06:45:00.000Z</published>
    <updated>2019-03-16T07:34:33.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码运行环境安装"><a href="#代码运行环境安装" class="headerlink" title="代码运行环境安装"></a>代码运行环境安装</h2><ul><li><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><blockquote><p><a href="http://www.jianshu.com/p/07c3456e875a" target="_blank" rel="noopener">利用nvm安装和在多个Node.js版本之间切换</a><br>npm更换源与yarn类似<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org //下载cnpm</code><br><code>$ npm config set registry https://registry.npm.taobao.org</code></p></blockquote></li><li><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><blockquote><ol><li>下载Ruby安装包，<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">官网地址</a>,在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby  </li><li><a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">RubyGems 镜像- Ruby China</a>更换Ruby下载源<br><code>$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ //删除默认源，添加镜像源</code><br><code>$ gem sources -l  //显示更换后的下载源</code><br><code>https://gems.ruby-china.org</code><br><code># 确保只有 gems.ruby-china.org</code></li><li>安装<strong>Sass</strong>的gem，<code>gem install sass</code></li></ol></blockquote><h2 id="开发软件下载安装"><a href="#开发软件下载安装" class="headerlink" title="开发软件下载安装"></a>开发软件下载安装</h2></li><li><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><blockquote><p>前端主要开发IDE，功能齐全，但是需要验证码。<br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">注册码获取网址1</a><br><a href="https://www.iteblog.com/idea/" target="_blank" rel="noopener">注册码获取网址2</a>  </p></blockquote></li><li><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><blockquote><p>前端次要开发编辑器，拥有很多好用插件，可以当一个很不错的编辑器使用  </p></blockquote></li><li><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><blockquote><p>npm的替代品，操作的指令更加简单，可以使用安装包进行安装，不过安装包经常下载失败。  </p><ol><li>安装包下载：<a href="http://pan.baidu.com/s/1pLRuEnx" target="_blank" rel="noopener">链接地址</a> 密码：drtf （失败则使用步骤2） </li><li>npm下载cnpm，然后用cnpm下载yarn。  <code>cnpm install yarn -g//安装yarn</code></li><li>yarn更换下载源  <blockquote><p><code>yarn config get registry // 查看下载源</code><br><code>yarn config set registry https://registry.npm.taobao.org //更换为淘宝源</code></p><a id="more"></a></blockquote></li></ol></blockquote></li><li><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote><p>代码版本控制软件，可使用命令符进行控制。也可以加装<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener"><strong>SourceTree</strong></a>（git的图形界面版）<br><strong>SourceTree</strong> 安装之后需要使用账号登陆以授权，因为墙的原因，无法登陆。这里记录一下跳过这个初始化的步骤。  </p><ol><li>安装之后，转到用户本地文件夹下的 SourceTree 目录，没有则新建<br><code>%LocalAppData%\Atlassian\SourceTree\</code></li><li>新建 accounts.json 文件<br><code>%LocalAppData%\Atlassian\SourceTree\accounts.json</code>  </li><li>输入以下内容保存即可<br><code>[</code><br><code>{</code><br><code>&quot;$id&quot;: &quot;1&quot;,</code><br><code>&quot;$type&quot;: &quot;SourceTree.Api.Host.Identity.Model.IdentityAccount,</code>   <code>SourceTree.Api.Host.Identity&quot;,</code><br><code>&quot;Authenticate&quot;: true,</code><br><code>&quot;HostInstance&quot;: {</code><br> <code>&quot;$id&quot;: &quot;2&quot;,</code><br> <code>&quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;,</code><br> <code>&quot;Host&quot;: {</code><br>   <code>&quot;$id&quot;: &quot;3&quot;,</code><br>   <code>&quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;,</code><br>   <code>&quot;Id&quot;: &quot;atlassian account&quot;</code><br> <code>},</code><br> <code>&quot;BaseUrl&quot;: &quot;https://id.atlassian.com/&quot;</code><br><code>},</code><br><code>&quot;Credentials&quot;: {</code><br> <code>&quot;$id&quot;: &quot;4&quot;,</code><br> <code>&quot;$type&quot;: &quot;SourceTree.Model.BasicAuthCredentials,</code>   <code>SourceTree.Api.Account&quot;,</code><br> <code>&quot;Username&quot;: &quot;&quot;,</code><br> <code>&quot;Email&quot;: null</code><br><code>},</code><br><code>&quot;IsDefault&quot;: false</code><br><code>}</code><br><code>]</code>  </li><li>现在再打开 SourceTree，直接显示主窗口了 </li><li>git中配置autocrlf来正确处理crlf，防止发生报错。<br><code>$ git config --global core.autocrlf true</code><br>Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能，如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF</li></ol></blockquote></li><li><h3 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h3><blockquote><p>适用于微信公众号网页开发，微信小程序开发</p></blockquote><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><blockquote><p><a href="http://pan.baidu.com/s/1i4Ts7mH" target="_blank" rel="noopener">项目配置文件</a> 密码：<em>2dxp</em></p></blockquote></li><li><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><blockquote><p>project/<br>  ├── dist/（生产环境代码）<br>  ├── docs/（开发文档）<br>  ├── src/（开发环境代码）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── asset/（开发环境代码）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── sass/（scss文件，需要用sass转换）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── js/（js文件，可能是es6格式，需要babel转换）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── images/（图片，需要进行压缩）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── plugins/（第三方插件）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── .html（html页面，需压缩）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── .gitignore（git忽略文件配置）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── gulpfile.js（gulp任务文件）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── package.json（node依赖包配置文件）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── yarn.lock（node依赖包关系文件）</p></blockquote></li><li><h3 id="建立版本控制"><a href="#建立版本控制" class="headerlink" title="建立版本控制"></a>建立版本控制</h3><blockquote><ol><li>创建SSH key<br>在户主目录下（<em>C:/users/电脑名/.ssh/id_rsa</em>），里面有id_rsa（私钥，不可泄露），id_rsa.pub（公钥，可以告诉任何人）  </li><li>如没有，则用Git Bash创建<br><code>$ ssh-keygen -t rsa -C &quot;xuqipeter@qq.com&quot;</code><br>然后一路回车，使用默认值即可  </li><li>登陆GtiHub=&gt;Accout Settings=&gt;SSH Keys页面=&gt;点Add SSH Key=&gt;填上任意Title，在key文本框里粘贴id-rsa.pub的内容</li><li>在码云或者GitHub创建仓库（公司可以用码云，私人可以用GitHub）</li><li>设置本地仓库，并创建版本。<br><code>$ git config --global user.name &quot;xuqipeter&quot; //全局设置用户名字</code><br><code>$ git config user.email &quot;xuqipeter@qq.com&quot; //全局设置用户邮箱</code><br><code>$ git init //建立本地仓库</code><br><code>$ git add -A //添加全部文件</code><br><code>$ git commit -m &quot;提交的相关说明&quot; //创建本地仓库版本</code>  </li><li>添加远程仓库&nbsp;&nbsp;<a href="http://www.yiibai.com/git" target="_blank" rel="noopener"><strong>教程点击这里</strong></a><br><code>$ git remote add origin git@github.com:/github用户名/learngit.git //远程仓库名字默认为origin</code><br><code>$ git fetch origin master:tmp //拉取远程master分支,命名为tmp分支</code><br><code>$ git diff tmp //比较本地的master分支和远程的origin/master分支的差别</code><br><code>$ git branch -a  //查看所有分支</code><br><code>$ git merge tmp ($ git merge origin/master) //合并远程分支,pull=fetch+merge</code>  </li></ol></blockquote></li></ul><blockquote><ol start="7"><li>git 在pull或者合并分支的时候有时会遇到这个界面。可以不管(直接下面3,4步)，如果要输入解释的话就需要:<br><code>1.按键盘字母 i 进入insert模式</code><br><code>2.修改最上面那行黄色合并信息,可以不修改</code><br><code>3.按键盘左上角&quot;Esc&quot;</code><br><code>4.输入&quot;:wq&quot;,注意是冒号+wq,按回车键即可</code><br><code>$ git push -u origin master //把本地内容推送到远程库上</code><br><code>$ git branch -d tmp //删除无用分支</code><br>pull：本地&lt;=远程<br>push：本地=&gt;远程  </li><li>从远程库克隆<br><code>git clone git@github.com:/github用户名/learngit.git</code></li></ol><ul><li><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3></li></ul><ol><li>使用yarn安装依赖包（<em>node_modules</em>文件夹）<br><code>$ yarn init</code><br><code>$ yarn install</code>  </li><li>可能遇到的问题，请百度解决。</li></ol><ul><li><h3 id="创建生产环境代码"><a href="#创建生产环境代码" class="headerlink" title="创建生产环境代码"></a>创建生产环境代码</h3></li></ul><ol><li>使用gulp（在webstorm中设置node环境为6.x.x版本）<br>因为gulp已经开始过时，所以不再继续更新gulpfile.js，以后会替换为webpack  </li><li>在html中的css和js链接末尾添加<code>?rev=@@hash</code>，自动生成版本号</li><li>css和js文件合并（<em>build:js asset/js/p-cruise-line.js</em>是合并后的文件路径）<br><code>&lt;!-- build:js asset/js/p-cruise-line.js?rev=@@hash --&gt;</code><br> <code>这里放要合并的文件</code><br><code>&lt;!-- endbuild --&gt;</code></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码运行环境安装&quot;&gt;&lt;a href=&quot;#代码运行环境安装&quot; class=&quot;headerlink&quot; title=&quot;代码运行环境安装&quot;&gt;&lt;/a&gt;代码运行环境安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;NodeJs&quot;&gt;&lt;a href=&quot;#NodeJs&quot; class=&quot;headerlink&quot; title=&quot;NodeJs&quot;&gt;&lt;/a&gt;NodeJs&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/07c3456e875a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用nvm安装和在多个Node.js版本之间切换&lt;/a&gt;&lt;br&gt;npm更换源与yarn类似&lt;br&gt;&lt;code&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org //下载cnpm&lt;/code&gt;&lt;br&gt;&lt;code&gt;$ npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;下载Ruby安装包，&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网地址&lt;/a&gt;,在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gems.ruby-china.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RubyGems 镜像- Ruby China&lt;/a&gt;更换Ruby下载源&lt;br&gt;&lt;code&gt;$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ //删除默认源，添加镜像源&lt;/code&gt;&lt;br&gt;&lt;code&gt;$ gem sources -l  //显示更换后的下载源&lt;/code&gt;&lt;br&gt;&lt;code&gt;https://gems.ruby-china.org&lt;/code&gt;&lt;br&gt;&lt;code&gt;# 确保只有 gems.ruby-china.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装&lt;strong&gt;Sass&lt;/strong&gt;的gem，&lt;code&gt;gem install sass&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开发软件下载安装&quot;&gt;&lt;a href=&quot;#开发软件下载安装&quot; class=&quot;headerlink&quot; title=&quot;开发软件下载安装&quot;&gt;&lt;/a&gt;开发软件下载安装&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;WebStorm&quot;&gt;&lt;a href=&quot;#WebStorm&quot; class=&quot;headerlink&quot; title=&quot;WebStorm&quot;&gt;&lt;/a&gt;WebStorm&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前端主要开发IDE，功能齐全，但是需要验证码。&lt;br&gt;&lt;a href=&quot;http://idea.lanyus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;注册码获取网址1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.iteblog.com/idea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;注册码获取网址2&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code&quot;&gt;&lt;/a&gt;Visual Studio Code&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前端次要开发编辑器，拥有很多好用插件，可以当一个很不错的编辑器使用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;yarn&quot;&gt;&lt;a href=&quot;#yarn&quot; class=&quot;headerlink&quot; title=&quot;yarn&quot;&gt;&lt;/a&gt;yarn&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;npm的替代品，操作的指令更加简单，可以使用安装包进行安装，不过安装包经常下载失败。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装包下载：&lt;a href=&quot;http://pan.baidu.com/s/1pLRuEnx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接地址&lt;/a&gt; 密码：drtf （失败则使用步骤2） &lt;/li&gt;
&lt;li&gt;npm下载cnpm，然后用cnpm下载yarn。  &lt;code&gt;cnpm install yarn -g//安装yarn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;yarn更换下载源  &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;yarn config get registry // 查看下载源&lt;/code&gt;&lt;br&gt;&lt;code&gt;yarn config set registry https://registry.npm.taobao.org //更换为淘宝源&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="环境配置" scheme="http://blog.xuziyu.cn/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="前端" scheme="http://blog.xuziyu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
